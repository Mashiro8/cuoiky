
cuoiky3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005228  08005228  00006228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e0  080052e0  00007080  2**0
                  CONTENTS
  4 .ARM          00000000  080052e0  080052e0  00007080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052e0  080052e0  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e0  080052e0  000062e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052e4  080052e4  000062e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080052e8  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000080  08005368  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08005368  00007290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000875c  00000000  00000000  000070a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdb  00000000  00000000  0000f805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  000113e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072f  00000000  00000000  00011d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017931  00000000  00000000  00012487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bea5  00000000  00000000  00029db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008759a  00000000  00000000  00035c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd1f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  000bd23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000bffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800520c 	.word	0x0800520c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800520c 	.word	0x0800520c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_fmul>:
 8000ac8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000acc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ad6:	ea92 0f0c 	teqne	r2, ip
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d06f      	beq.n	8000bc0 <__aeabi_fmul+0xf8>
 8000ae0:	441a      	add	r2, r3
 8000ae2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ae6:	0240      	lsls	r0, r0, #9
 8000ae8:	bf18      	it	ne
 8000aea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000aee:	d01e      	beq.n	8000b2e <__aeabi_fmul+0x66>
 8000af0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000af4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000af8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000afc:	fba0 3101 	umull	r3, r1, r0, r1
 8000b00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b04:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b08:	bf3e      	ittt	cc
 8000b0a:	0049      	lslcc	r1, r1, #1
 8000b0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b10:	005b      	lslcc	r3, r3, #1
 8000b12:	ea40 0001 	orr.w	r0, r0, r1
 8000b16:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b1a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b1c:	d81d      	bhi.n	8000b5a <__aeabi_fmul+0x92>
 8000b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b26:	bf08      	it	eq
 8000b28:	f020 0001 	biceq.w	r0, r0, #1
 8000b2c:	4770      	bx	lr
 8000b2e:	f090 0f00 	teq	r0, #0
 8000b32:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b36:	bf08      	it	eq
 8000b38:	0249      	lsleq	r1, r1, #9
 8000b3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b42:	3a7f      	subs	r2, #127	@ 0x7f
 8000b44:	bfc2      	ittt	gt
 8000b46:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b4e:	4770      	bxgt	lr
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	3a01      	subs	r2, #1
 8000b5a:	dc5d      	bgt.n	8000c18 <__aeabi_fmul+0x150>
 8000b5c:	f112 0f19 	cmn.w	r2, #25
 8000b60:	bfdc      	itt	le
 8000b62:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bxle	lr
 8000b68:	f1c2 0200 	rsb	r2, r2, #0
 8000b6c:	0041      	lsls	r1, r0, #1
 8000b6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b72:	f1c2 0220 	rsb	r2, r2, #32
 8000b76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b7e:	f140 0000 	adc.w	r0, r0, #0
 8000b82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b86:	bf08      	it	eq
 8000b88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b8c:	4770      	bx	lr
 8000b8e:	f092 0f00 	teq	r2, #0
 8000b92:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b96:	bf02      	ittt	eq
 8000b98:	0040      	lsleq	r0, r0, #1
 8000b9a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b9e:	3a01      	subeq	r2, #1
 8000ba0:	d0f9      	beq.n	8000b96 <__aeabi_fmul+0xce>
 8000ba2:	ea40 000c 	orr.w	r0, r0, ip
 8000ba6:	f093 0f00 	teq	r3, #0
 8000baa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bae:	bf02      	ittt	eq
 8000bb0:	0049      	lsleq	r1, r1, #1
 8000bb2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bb6:	3b01      	subeq	r3, #1
 8000bb8:	d0f9      	beq.n	8000bae <__aeabi_fmul+0xe6>
 8000bba:	ea41 010c 	orr.w	r1, r1, ip
 8000bbe:	e78f      	b.n	8000ae0 <__aeabi_fmul+0x18>
 8000bc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bc4:	ea92 0f0c 	teq	r2, ip
 8000bc8:	bf18      	it	ne
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d00a      	beq.n	8000be6 <__aeabi_fmul+0x11e>
 8000bd0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bd4:	bf18      	it	ne
 8000bd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bda:	d1d8      	bne.n	8000b8e <__aeabi_fmul+0xc6>
 8000bdc:	ea80 0001 	eor.w	r0, r0, r1
 8000be0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f090 0f00 	teq	r0, #0
 8000bea:	bf17      	itett	ne
 8000bec:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	f091 0f00 	teqne	r1, #0
 8000bf6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000bfa:	d014      	beq.n	8000c26 <__aeabi_fmul+0x15e>
 8000bfc:	ea92 0f0c 	teq	r2, ip
 8000c00:	d101      	bne.n	8000c06 <__aeabi_fmul+0x13e>
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	d10f      	bne.n	8000c26 <__aeabi_fmul+0x15e>
 8000c06:	ea93 0f0c 	teq	r3, ip
 8000c0a:	d103      	bne.n	8000c14 <__aeabi_fmul+0x14c>
 8000c0c:	024b      	lsls	r3, r1, #9
 8000c0e:	bf18      	it	ne
 8000c10:	4608      	movne	r0, r1
 8000c12:	d108      	bne.n	8000c26 <__aeabi_fmul+0x15e>
 8000c14:	ea80 0001 	eor.w	r0, r0, r1
 8000c18:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_fdiv>:
 8000c30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c38:	bf1e      	ittt	ne
 8000c3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c3e:	ea92 0f0c 	teqne	r2, ip
 8000c42:	ea93 0f0c 	teqne	r3, ip
 8000c46:	d069      	beq.n	8000d1c <__aeabi_fdiv+0xec>
 8000c48:	eba2 0203 	sub.w	r2, r2, r3
 8000c4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c50:	0249      	lsls	r1, r1, #9
 8000c52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c56:	d037      	beq.n	8000cc8 <__aeabi_fdiv+0x98>
 8000c58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c64:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	bf38      	it	cc
 8000c6c:	005b      	lslcc	r3, r3, #1
 8000c6e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c72:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c76:	428b      	cmp	r3, r1
 8000c78:	bf24      	itt	cs
 8000c7a:	1a5b      	subcs	r3, r3, r1
 8000c7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c84:	bf24      	itt	cs
 8000c86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c92:	bf24      	itt	cs
 8000c94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ca0:	bf24      	itt	cs
 8000ca2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ca6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	bf18      	it	ne
 8000cae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cb2:	d1e0      	bne.n	8000c76 <__aeabi_fdiv+0x46>
 8000cb4:	2afd      	cmp	r2, #253	@ 0xfd
 8000cb6:	f63f af50 	bhi.w	8000b5a <__aeabi_fmul+0x92>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ccc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cd0:	327f      	adds	r2, #127	@ 0x7f
 8000cd2:	bfc2      	ittt	gt
 8000cd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cdc:	4770      	bxgt	lr
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	3a01      	subs	r2, #1
 8000ce8:	e737      	b.n	8000b5a <__aeabi_fmul+0x92>
 8000cea:	f092 0f00 	teq	r2, #0
 8000cee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cf2:	bf02      	ittt	eq
 8000cf4:	0040      	lsleq	r0, r0, #1
 8000cf6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cfa:	3a01      	subeq	r2, #1
 8000cfc:	d0f9      	beq.n	8000cf2 <__aeabi_fdiv+0xc2>
 8000cfe:	ea40 000c 	orr.w	r0, r0, ip
 8000d02:	f093 0f00 	teq	r3, #0
 8000d06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	bf02      	ittt	eq
 8000d0c:	0049      	lsleq	r1, r1, #1
 8000d0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d12:	3b01      	subeq	r3, #1
 8000d14:	d0f9      	beq.n	8000d0a <__aeabi_fdiv+0xda>
 8000d16:	ea41 010c 	orr.w	r1, r1, ip
 8000d1a:	e795      	b.n	8000c48 <__aeabi_fdiv+0x18>
 8000d1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d20:	ea92 0f0c 	teq	r2, ip
 8000d24:	d108      	bne.n	8000d38 <__aeabi_fdiv+0x108>
 8000d26:	0242      	lsls	r2, r0, #9
 8000d28:	f47f af7d 	bne.w	8000c26 <__aeabi_fmul+0x15e>
 8000d2c:	ea93 0f0c 	teq	r3, ip
 8000d30:	f47f af70 	bne.w	8000c14 <__aeabi_fmul+0x14c>
 8000d34:	4608      	mov	r0, r1
 8000d36:	e776      	b.n	8000c26 <__aeabi_fmul+0x15e>
 8000d38:	ea93 0f0c 	teq	r3, ip
 8000d3c:	d104      	bne.n	8000d48 <__aeabi_fdiv+0x118>
 8000d3e:	024b      	lsls	r3, r1, #9
 8000d40:	f43f af4c 	beq.w	8000bdc <__aeabi_fmul+0x114>
 8000d44:	4608      	mov	r0, r1
 8000d46:	e76e      	b.n	8000c26 <__aeabi_fmul+0x15e>
 8000d48:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d4c:	bf18      	it	ne
 8000d4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d52:	d1ca      	bne.n	8000cea <__aeabi_fdiv+0xba>
 8000d54:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d58:	f47f af5c 	bne.w	8000c14 <__aeabi_fmul+0x14c>
 8000d5c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d60:	f47f af3c 	bne.w	8000bdc <__aeabi_fmul+0x114>
 8000d64:	e75f      	b.n	8000c26 <__aeabi_fmul+0x15e>
 8000d66:	bf00      	nop

08000d68 <__gesf2>:
 8000d68:	f04f 3cff 	mov.w	ip, #4294967295
 8000d6c:	e006      	b.n	8000d7c <__cmpsf2+0x4>
 8000d6e:	bf00      	nop

08000d70 <__lesf2>:
 8000d70:	f04f 0c01 	mov.w	ip, #1
 8000d74:	e002      	b.n	8000d7c <__cmpsf2+0x4>
 8000d76:	bf00      	nop

08000d78 <__cmpsf2>:
 8000d78:	f04f 0c01 	mov.w	ip, #1
 8000d7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d8c:	bf18      	it	ne
 8000d8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d92:	d011      	beq.n	8000db8 <__cmpsf2+0x40>
 8000d94:	b001      	add	sp, #4
 8000d96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d9a:	bf18      	it	ne
 8000d9c:	ea90 0f01 	teqne	r0, r1
 8000da0:	bf58      	it	pl
 8000da2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000da6:	bf88      	it	hi
 8000da8:	17c8      	asrhi	r0, r1, #31
 8000daa:	bf38      	it	cc
 8000dac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000db0:	bf18      	it	ne
 8000db2:	f040 0001 	orrne.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dbc:	d102      	bne.n	8000dc4 <__cmpsf2+0x4c>
 8000dbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dc2:	d105      	bne.n	8000dd0 <__cmpsf2+0x58>
 8000dc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000dc8:	d1e4      	bne.n	8000d94 <__cmpsf2+0x1c>
 8000dca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dce:	d0e1      	beq.n	8000d94 <__cmpsf2+0x1c>
 8000dd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_cfrcmple>:
 8000dd8:	4684      	mov	ip, r0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	4661      	mov	r1, ip
 8000dde:	e7ff      	b.n	8000de0 <__aeabi_cfcmpeq>

08000de0 <__aeabi_cfcmpeq>:
 8000de0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000de2:	f7ff ffc9 	bl	8000d78 <__cmpsf2>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	bf48      	it	mi
 8000dea:	f110 0f00 	cmnmi.w	r0, #0
 8000dee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000df0 <__aeabi_fcmpeq>:
 8000df0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df4:	f7ff fff4 	bl	8000de0 <__aeabi_cfcmpeq>
 8000df8:	bf0c      	ite	eq
 8000dfa:	2001      	moveq	r0, #1
 8000dfc:	2000      	movne	r0, #0
 8000dfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e02:	bf00      	nop

08000e04 <__aeabi_fcmplt>:
 8000e04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e08:	f7ff ffea 	bl	8000de0 <__aeabi_cfcmpeq>
 8000e0c:	bf34      	ite	cc
 8000e0e:	2001      	movcc	r0, #1
 8000e10:	2000      	movcs	r0, #0
 8000e12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e16:	bf00      	nop

08000e18 <__aeabi_fcmple>:
 8000e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e1c:	f7ff ffe0 	bl	8000de0 <__aeabi_cfcmpeq>
 8000e20:	bf94      	ite	ls
 8000e22:	2001      	movls	r0, #1
 8000e24:	2000      	movhi	r0, #0
 8000e26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2a:	bf00      	nop

08000e2c <__aeabi_fcmpge>:
 8000e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e30:	f7ff ffd2 	bl	8000dd8 <__aeabi_cfrcmple>
 8000e34:	bf94      	ite	ls
 8000e36:	2001      	movls	r0, #1
 8000e38:	2000      	movhi	r0, #0
 8000e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3e:	bf00      	nop

08000e40 <__aeabi_fcmpgt>:
 8000e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e44:	f7ff ffc8 	bl	8000dd8 <__aeabi_cfrcmple>
 8000e48:	bf34      	ite	cc
 8000e4a:	2001      	movcc	r0, #1
 8000e4c:	2000      	movcs	r0, #0
 8000e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e52:	bf00      	nop

08000e54 <__aeabi_f2iz>:
 8000e54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e58:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e5c:	d30f      	bcc.n	8000e7e <__aeabi_f2iz+0x2a>
 8000e5e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e66:	d90d      	bls.n	8000e84 <__aeabi_f2iz+0x30>
 8000e68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e70:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e74:	fa23 f002 	lsr.w	r0, r3, r2
 8000e78:	bf18      	it	ne
 8000e7a:	4240      	negne	r0, r0
 8000e7c:	4770      	bx	lr
 8000e7e:	f04f 0000 	mov.w	r0, #0
 8000e82:	4770      	bx	lr
 8000e84:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e88:	d101      	bne.n	8000e8e <__aeabi_f2iz+0x3a>
 8000e8a:	0242      	lsls	r2, r0, #9
 8000e8c:	d105      	bne.n	8000e9a <__aeabi_f2iz+0x46>
 8000e8e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e92:	bf08      	it	eq
 8000e94:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f04f 0000 	mov.w	r0, #0
 8000e9e:	4770      	bx	lr

08000ea0 <Mq2_init>:
ADC_HandleTypeDef *hadc;

 __WEAK void Mq2_callback(float value){

}
void Mq2_init(Tyde_Def_MQ2 *_mq2,ADC_HandleTypeDef *_hadc, float a , float b){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
	hadc = _hadc;
 8000eae:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <Mq2_init+0x2c>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	6013      	str	r3, [r2, #0]
	_mq2->a = a;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
	_mq2->b = b;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2000009c 	.word	0x2000009c

08000ed0 <Mq2_handle>:
void Mq2_handle(Tyde_Def_MQ2 *_mq2){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(hadc);
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <Mq2_handle+0x88>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 ff55 	bl	8001d8c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc,1000);
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <Mq2_handle+0x88>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 f828 	bl	8001f40 <HAL_ADC_PollForConversion>
		uint16_t value_before = HAL_ADC_GetValue(hadc);
 8000ef0:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <Mq2_handle+0x88>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 f929 	bl	800214c <HAL_ADC_GetValue>
 8000efa:	4603      	mov	r3, r0
 8000efc:	81fb      	strh	r3, [r7, #14]
		set_Sensor_volt(_mq2,value_before);
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f82c 	bl	8000f60 <set_Sensor_volt>
		set_RS_air(_mq2);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f859 	bl	8000fc0 <set_RS_air>
    set_RO(_mq2);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 f8aa 	bl	8001068 <set_RO>
	  uint16_t value_after = HAL_ADC_GetValue(hadc);
 8000f14:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <Mq2_handle+0x88>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 f917 	bl	800214c <HAL_ADC_GetValue>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	81bb      	strh	r3, [r7, #12]
	  set_Sensor_volt(_mq2,value_after);
 8000f22:	89bb      	ldrh	r3, [r7, #12]
 8000f24:	4619      	mov	r1, r3
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f81a 	bl	8000f60 <set_Sensor_volt>
	  set_RS_gas(_mq2);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f871 	bl	8001014 <set_RS_gas>
    set_ratino(_mq2);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 f8b8 	bl	80010a8 <set_ratino>
	  set_ppm(_mq2);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f8c9 	bl	80010d0 <set_ppm>
    set_percent_result(_mq2);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f908 	bl	8001154 <set_percent_result>
		HAL_ADC_Stop(hadc);
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <Mq2_handle+0x88>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 ffcd 	bl	8001ee8 <HAL_ADC_Stop>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000009c 	.word	0x2000009c
 8000f5c:	00000000 	.word	0x00000000

08000f60 <set_Sensor_volt>:
void set_Sensor_volt(Tyde_Def_MQ2 *_mq2 , uint16_t _adcValue){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
  float Volt = (Vref*_adcValue / (Number_sample)) ;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa40 	bl	80003f4 <__aeabi_i2d>
 8000f74:	a30e      	add	r3, pc, #56	@ (adr r3, 8000fb0 <set_Sensor_volt+0x50>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff faa5 	bl	80004c8 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	a30c      	add	r3, pc, #48	@ (adr r3, 8000fb8 <set_Sensor_volt+0x58>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fbc6 	bl	800071c <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fd46 	bl	8000a28 <__aeabi_d2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60fb      	str	r3, [r7, #12]
  _mq2->Sensor_volt = Volt;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	61da      	str	r2, [r3, #28]
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	66666666 	.word	0x66666666
 8000fb4:	400a6666 	.word	0x400a6666
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40affe00 	.word	0x40affe00

08000fc0 <set_RS_air>:
void set_RS_air(Tyde_Def_MQ2 *_mq2){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	_mq2->RS_air = ((3.3*RL)/_mq2->Sensor_volt)-RL;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa23 	bl	8000418 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	f04f 0000 	mov.w	r0, #0
 8000fda:	490c      	ldr	r1, [pc, #48]	@ (800100c <set_RS_air+0x4c>)
 8000fdc:	f7ff fb9e 	bl	800071c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <set_RS_air+0x50>)
 8000fee:	f7ff f8b3 	bl	8000158 <__aeabi_dsub>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fd15 	bl	8000a28 <__aeabi_d2f>
 8000ffe:	4602      	mov	r2, r0
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	60da      	str	r2, [r3, #12]
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40408000 	.word	0x40408000
 8001010:	40240000 	.word	0x40240000

08001014 <set_RS_gas>:
void set_RS_gas(Tyde_Def_MQ2 *_mq2){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	_mq2->RS_gas = ((3.3*RL)/_mq2->Sensor_volt)-RL;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f9f9 	bl	8000418 <__aeabi_f2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	490c      	ldr	r1, [pc, #48]	@ (8001060 <set_RS_gas+0x4c>)
 8001030:	f7ff fb74 	bl	800071c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <set_RS_gas+0x50>)
 8001042:	f7ff f889 	bl	8000158 <__aeabi_dsub>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fceb 	bl	8000a28 <__aeabi_d2f>
 8001052:	4602      	mov	r2, r0
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	611a      	str	r2, [r3, #16]
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40408000 	.word	0x40408000
 8001064:	40240000 	.word	0x40240000

08001068 <set_RO>:
void set_RO(Tyde_Def_MQ2 *_mq2){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	//RS / R0 = 4.4 ppm : ty so can o kk trong lanh
	_mq2->R0 = _mq2->RS_air/4.4;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f9cf 	bl	8000418 <__aeabi_f2d>
 800107a:	a309      	add	r3, pc, #36	@ (adr r3, 80010a0 <set_RO+0x38>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fb4c 	bl	800071c <__aeabi_ddiv>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fccc 	bl	8000a28 <__aeabi_d2f>
 8001090:	4602      	mov	r2, r0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	9999999a 	.word	0x9999999a
 80010a4:	40119999 	.word	0x40119999

080010a8 <set_ratino>:
void set_ratino(Tyde_Def_MQ2 *_mq2){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	_mq2->ratino = _mq2->RS_gas / _mq2->R0 ;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4610      	mov	r0, r2
 80010bc:	f7ff fdb8 	bl	8000c30 <__aeabi_fdiv>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <set_ppm>:
void set_ppm(Tyde_Def_MQ2 *_mq2){
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	_mq2->ppm = pow(10, ((log10(_mq2->ratino)-_mq2->a)/(_mq2->b)));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f99b 	bl	8000418 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f002 ff19 	bl	8003f20 <log10>
 80010ee:	4604      	mov	r4, r0
 80010f0:	460d      	mov	r5, r1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f98e 	bl	8000418 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4620      	mov	r0, r4
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff f828 	bl	8000158 <__aeabi_dsub>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4614      	mov	r4, r2
 800110e:	461d      	mov	r5, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f97f 	bl	8000418 <__aeabi_f2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4620      	mov	r0, r4
 8001120:	4629      	mov	r1, r5
 8001122:	f7ff fafb 	bl	800071c <__aeabi_ddiv>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <set_ppm+0x80>)
 8001130:	f002 ff28 	bl	8003f84 <pow>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fc74 	bl	8000a28 <__aeabi_d2f>
 8001140:	4602      	mov	r2, r0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	615a      	str	r2, [r3, #20]
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bdb0      	pop	{r4, r5, r7, pc}
 800114e:	bf00      	nop
 8001150:	40240000 	.word	0x40240000

08001154 <set_percent_result>:

void set_percent_result(Tyde_Def_MQ2 *_mq2){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 _mq2->percent_result = _mq2->ppm / 10000;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	4908      	ldr	r1, [pc, #32]	@ (8001184 <set_percent_result+0x30>)
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fd64 	bl	8000c30 <__aeabi_fdiv>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	621a      	str	r2, [r3, #32]
	Mq2_callback(_mq2->percent_result);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f9fd 	bl	8001574 <Mq2_callback>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	461c4000 	.word	0x461c4000

08001188 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001192:	4a38      	ldr	r2, [pc, #224]	@ (8001274 <HD44780_Init+0xec>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001198:	4b37      	ldr	r3, [pc, #220]	@ (8001278 <HD44780_Init+0xf0>)
 800119a:	2208      	movs	r2, #8
 800119c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800119e:	4b37      	ldr	r3, [pc, #220]	@ (800127c <HD44780_Init+0xf4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80011a4:	4b33      	ldr	r3, [pc, #204]	@ (8001274 <HD44780_Init+0xec>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d907      	bls.n	80011bc <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80011ac:	4b33      	ldr	r3, [pc, #204]	@ (800127c <HD44780_Init+0xf4>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b31      	ldr	r3, [pc, #196]	@ (800127c <HD44780_Init+0xf4>)
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e006      	b.n	80011ca <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <HD44780_Init+0xf4>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HD44780_Init+0xf4>)
 80011c8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80011ca:	f000 f985 	bl	80014d8 <DelayInit>
  HAL_Delay(50);
 80011ce:	2032      	movs	r0, #50	@ 0x32
 80011d0:	f000 fce0 	bl	8001b94 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80011d4:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <HD44780_Init+0xf0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f943 	bl	8001464 <ExpanderWrite>
  HAL_Delay(1000);
 80011de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011e2:	f000 fcd7 	bl	8001b94 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80011e6:	2030      	movs	r0, #48	@ 0x30
 80011e8:	f000 f92b 	bl	8001442 <Write4Bits>
  DelayUS(4500);
 80011ec:	f241 1094 	movw	r0, #4500	@ 0x1194
 80011f0:	f000 f99a 	bl	8001528 <DelayUS>

  Write4Bits(0x03 << 4);
 80011f4:	2030      	movs	r0, #48	@ 0x30
 80011f6:	f000 f924 	bl	8001442 <Write4Bits>
  DelayUS(4500);
 80011fa:	f241 1094 	movw	r0, #4500	@ 0x1194
 80011fe:	f000 f993 	bl	8001528 <DelayUS>

  Write4Bits(0x03 << 4);
 8001202:	2030      	movs	r0, #48	@ 0x30
 8001204:	f000 f91d 	bl	8001442 <Write4Bits>
  DelayUS(4500);
 8001208:	f241 1094 	movw	r0, #4500	@ 0x1194
 800120c:	f000 f98c 	bl	8001528 <DelayUS>

  Write4Bits(0x02 << 4);
 8001210:	2020      	movs	r0, #32
 8001212:	f000 f916 	bl	8001442 <Write4Bits>
  DelayUS(100);
 8001216:	2064      	movs	r0, #100	@ 0x64
 8001218:	f000 f986 	bl	8001528 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800121c:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HD44780_Init+0xf4>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	f043 0320 	orr.w	r3, r3, #32
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f8ce 	bl	80013c8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HD44780_Init+0xf8>)
 800122e:	2204      	movs	r2, #4
 8001230:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001232:	f000 f875 	bl	8001320 <HD44780_Display>
  HD44780_Clear();
 8001236:	f000 f82b 	bl	8001290 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HD44780_Init+0xfc>)
 800123c:	2202      	movs	r2, #2
 800123e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001240:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HD44780_Init+0xfc>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f8bc 	bl	80013c8 <SendCommand>
  DelayUS(4500);
 8001250:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001254:	f000 f968 	bl	8001528 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001258:	490b      	ldr	r1, [pc, #44]	@ (8001288 <HD44780_Init+0x100>)
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f876 	bl	800134c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001260:	490a      	ldr	r1, [pc, #40]	@ (800128c <HD44780_Init+0x104>)
 8001262:	2001      	movs	r0, #1
 8001264:	f000 f872 	bl	800134c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001268:	f000 f81d 	bl	80012a6 <HD44780_Home>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200000a3 	.word	0x200000a3
 8001278:	200000a4 	.word	0x200000a4
 800127c:	200000a0 	.word	0x200000a0
 8001280:	200000a1 	.word	0x200000a1
 8001284:	200000a2 	.word	0x200000a2
 8001288:	20000000 	.word	0x20000000
 800128c:	20000008 	.word	0x20000008

08001290 <HD44780_Clear>:

void HD44780_Clear()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001294:	2001      	movs	r0, #1
 8001296:	f000 f897 	bl	80013c8 <SendCommand>
  DelayUS(2000);
 800129a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800129e:	f000 f943 	bl	8001528 <DelayUS>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HD44780_Home>:

void HD44780_Home()
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80012aa:	2002      	movs	r0, #2
 80012ac:	f000 f88c 	bl	80013c8 <SendCommand>
  DelayUS(2000);
 80012b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012b4:	f000 f938 	bl	8001528 <DelayUS>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HD44780_SetCursor+0x5c>)
 80012ce:	f107 0408 	add.w	r4, r7, #8
 80012d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <HD44780_SetCursor+0x60>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	79ba      	ldrb	r2, [r7, #6]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d303      	bcc.n	80012ea <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HD44780_SetCursor+0x60>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	3318      	adds	r3, #24
 80012f0:	443b      	add	r3, r7
 80012f2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4413      	add	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001304:	b25b      	sxtb	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f85d 	bl	80013c8 <SendCommand>
}
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	08005228 	.word	0x08005228
 800131c:	200000a3 	.word	0x200000a3

08001320 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <HD44780_Display+0x28>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HD44780_Display+0x28>)
 8001330:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001332:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HD44780_Display+0x28>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f843 	bl	80013c8 <SendCommand>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200000a1 	.word	0x200000a1

0800134c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f82a 	bl	80013c8 <SendCommand>
  for (int i=0; i<8; i++)
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e009      	b.n	800138e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f82e 	bl	80013e4 <SendChar>
  for (int i=0; i<8; i++)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b07      	cmp	r3, #7
 8001392:	ddf2      	ble.n	800137a <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80013a6:	e006      	b.n	80013b6 <HD44780_PrintStr+0x18>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f817 	bl	80013e4 <SendChar>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f4      	bne.n	80013a8 <HD44780_PrintStr+0xa>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f812 	bl	8001400 <Send>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <SendChar>:

static void SendChar(uint8_t ch)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2101      	movs	r1, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f804 	bl	8001400 <Send>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	460a      	mov	r2, r1
 800140a:	71fb      	strb	r3, [r7, #7]
 800140c:	4613      	mov	r3, r2
 800140e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f023 030f 	bic.w	r3, r3, #15
 8001416:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	4313      	orrs	r3, r2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f80b 	bl	8001442 <Write4Bits>
  Write4Bits((lownib)|mode);
 800142c:	7bba      	ldrb	r2, [r7, #14]
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	4313      	orrs	r3, r2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f804 	bl	8001442 <Write4Bits>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f808 	bl	8001464 <ExpanderWrite>
  PulseEnable(value);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f820 	bl	800149c <PulseEnable>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <ExpanderWrite+0x30>)
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	4313      	orrs	r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800147a:	f107 020f 	add.w	r2, r7, #15
 800147e:	230a      	movs	r3, #10
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	214e      	movs	r1, #78	@ 0x4e
 8001486:	4804      	ldr	r0, [pc, #16]	@ (8001498 <ExpanderWrite+0x34>)
 8001488:	f001 fbe8 	bl	8002c5c <HAL_I2C_Master_Transmit>
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200000a4 	.word	0x200000a4
 8001498:	200000d8 	.word	0x200000d8

0800149c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ffd8 	bl	8001464 <ExpanderWrite>
  DelayUS(20);
 80014b4:	2014      	movs	r0, #20
 80014b6:	f000 f837 	bl	8001528 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ffce 	bl	8001464 <ExpanderWrite>
  DelayUS(20);
 80014c8:	2014      	movs	r0, #20
 80014ca:	f000 f82d 	bl	8001528 <DelayUS>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <DelayInit>:

static void DelayInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <DelayInit+0x48>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001520 <DelayInit+0x48>)
 80014e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014e6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <DelayInit+0x48>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <DelayInit+0x48>)
 80014ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014f2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <DelayInit+0x4c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <DelayInit+0x4c>)
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <DelayInit+0x4c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	@ (8001524 <DelayInit+0x4c>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <DelayInit+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001512:	bf00      	nop
  __ASM volatile ("NOP");
 8001514:	bf00      	nop
  __ASM volatile ("NOP");
 8001516:	bf00      	nop
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	e000edf0 	.word	0xe000edf0
 8001524:	e0001000 	.word	0xe0001000

08001528 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001530:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <DelayUS+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <DelayUS+0x44>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9a      	lsrs	r2, r3, #18
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001544:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <DelayUS+0x48>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <DelayUS+0x48>)
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f6      	bhi.n	800154a <DelayUS+0x22>
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000010 	.word	0x20000010
 800156c:	431bde83 	.word	0x431bde83
 8001570:	e0001000 	.word	0xe0001000

08001574 <Mq2_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float data;
void Mq2_callback(float value){
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	data = value;
 800157c:	4a03      	ldr	r2, [pc, #12]	@ (800158c <Mq2_callback+0x18>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	20000150 	.word	0x20000150

08001590 <main>:
  * @brief  The application entry point.
  * @retval int
  */
uint16_t value;
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 float percent=0;
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
	 float canhbao = 0.25;
 800159c:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 80015a0:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a2:	f000 fa95 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a6:	f000 f86f 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015aa:	f000 f929 	bl	8001800 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015ae:	f000 f8f9 	bl	80017a4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80015b2:	f000 f8b9 	bl	8001728 <MX_ADC1_Init>
  Mq2_init(&mq2,&hadc1,0.574,-2.222);
 80015b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <main+0xe0>)
 80015b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001674 <main+0xe4>)
 80015ba:	492f      	ldr	r1, [pc, #188]	@ (8001678 <main+0xe8>)
 80015bc:	482f      	ldr	r0, [pc, #188]	@ (800167c <main+0xec>)
 80015be:	f7ff fc6f 	bl	8000ea0 <Mq2_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Mq2_handle(&mq2);
 80015c2:	482e      	ldr	r0, [pc, #184]	@ (800167c <main+0xec>)
 80015c4:	f7ff fc84 	bl	8000ed0 <Mq2_handle>
	  percent = mq2.percent_result;
 80015c8:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <main+0xec>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	60fb      	str	r3, [r7, #12]
	      /* USER CODE BEGIN 3 */
	      itoa(percent,snum , 10);
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff fc40 	bl	8000e54 <__aeabi_f2iz>
 80015d4:	463b      	mov	r3, r7
 80015d6:	220a      	movs	r2, #10
 80015d8:	4619      	mov	r1, r3
 80015da:	f002 fc2b 	bl	8003e34 <itoa>
	       HD44780_Init(2);
 80015de:	2002      	movs	r0, #2
 80015e0:	f7ff fdd2 	bl	8001188 <HD44780_Init>
	       HD44780_Clear();
 80015e4:	f7ff fe54 	bl	8001290 <HD44780_Clear>
	       HD44780_SetCursor(0,0);
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff fe66 	bl	80012bc <HD44780_SetCursor>
	       HD44780_PrintStr("nong do khi ga");
 80015f0:	4823      	ldr	r0, [pc, #140]	@ (8001680 <main+0xf0>)
 80015f2:	f7ff fed4 	bl	800139e <HD44780_PrintStr>
	       HD44780_SetCursor(17,1);
 80015f6:	2101      	movs	r1, #1
 80015f8:	2011      	movs	r0, #17
 80015fa:	f7ff fe5f 	bl	80012bc <HD44780_SetCursor>
	       HD44780_PrintStr(snum);
 80015fe:	463b      	mov	r3, r7
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fecc 	bl	800139e <HD44780_PrintStr>
	       HAL_Delay(2000);
 8001606:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800160a:	f000 fac3 	bl	8001b94 <HAL_Delay>
	  		if(percent <= canhbao)
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fc01 	bl	8000e18 <__aeabi_fcmple>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d014      	beq.n	8001646 <main+0xb6>
	  		 {
	  		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 800161c:	2201      	movs	r2, #1
 800161e:	2108      	movs	r1, #8
 8001620:	4818      	ldr	r0, [pc, #96]	@ (8001684 <main+0xf4>)
 8001622:	f001 f99b 	bl	800295c <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8001626:	2200      	movs	r2, #0
 8001628:	2120      	movs	r1, #32
 800162a:	4816      	ldr	r0, [pc, #88]	@ (8001684 <main+0xf4>)
 800162c:	f001 f996 	bl	800295c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8001630:	2200      	movs	r2, #0
 8001632:	2110      	movs	r1, #16
 8001634:	4813      	ldr	r0, [pc, #76]	@ (8001684 <main+0xf4>)
 8001636:	f001 f991 	bl	800295c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 800163a:	2200      	movs	r2, #0
 800163c:	2140      	movs	r1, #64	@ 0x40
 800163e:	4811      	ldr	r0, [pc, #68]	@ (8001684 <main+0xf4>)
 8001640:	f001 f98c 	bl	800295c <HAL_GPIO_WritePin>
 8001644:	e7bd      	b.n	80015c2 <main+0x32>
	  		 }
	  		 else
	  		 {
	  			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,0);
 8001646:	2200      	movs	r2, #0
 8001648:	2108      	movs	r1, #8
 800164a:	480e      	ldr	r0, [pc, #56]	@ (8001684 <main+0xf4>)
 800164c:	f001 f986 	bl	800295c <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8001650:	2201      	movs	r2, #1
 8001652:	2110      	movs	r1, #16
 8001654:	480b      	ldr	r0, [pc, #44]	@ (8001684 <main+0xf4>)
 8001656:	f001 f981 	bl	800295c <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 800165a:	2201      	movs	r2, #1
 800165c:	2120      	movs	r1, #32
 800165e:	4809      	ldr	r0, [pc, #36]	@ (8001684 <main+0xf4>)
 8001660:	f001 f97c 	bl	800295c <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8001664:	2201      	movs	r2, #1
 8001666:	2140      	movs	r1, #64	@ 0x40
 8001668:	4806      	ldr	r0, [pc, #24]	@ (8001684 <main+0xf4>)
 800166a:	f001 f977 	bl	800295c <HAL_GPIO_WritePin>
  {
 800166e:	e7a8      	b.n	80015c2 <main+0x32>
 8001670:	c00e353f 	.word	0xc00e353f
 8001674:	3f12f1aa 	.word	0x3f12f1aa
 8001678:	200000a8 	.word	0x200000a8
 800167c:	2000012c 	.word	0x2000012c
 8001680:	08005238 	.word	0x08005238
 8001684:	40010800 	.word	0x40010800

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	@ 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001692:	2228      	movs	r2, #40	@ 0x28
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fc10 	bl	8003ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016bc:	2301      	movs	r3, #1
 80016be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c0:	2310      	movs	r3, #16
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fe1d 	bl	800330c <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80016d8:	f000 f8f0 	bl	80018bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 f88a 	bl	8003810 <HAL_RCC_ClockConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001702:	f000 f8db 	bl	80018bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001706:	2302      	movs	r3, #2
 8001708:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fa0b 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800171c:	f000 f8ce 	bl	80018bc <Error_Handler>
  }
}
 8001720:	bf00      	nop
 8001722:	3750      	adds	r7, #80	@ 0x50
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <MX_ADC1_Init+0x74>)
 800173a:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <MX_ADC1_Init+0x78>)
 800173c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <MX_ADC1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001744:	4b15      	ldr	r3, [pc, #84]	@ (800179c <MX_ADC1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_ADC1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <MX_ADC1_Init+0x74>)
 8001752:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001756:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001758:	4b10      	ldr	r3, [pc, #64]	@ (800179c <MX_ADC1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <MX_ADC1_Init+0x74>)
 8001760:	2201      	movs	r2, #1
 8001762:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001764:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_ADC1_Init+0x74>)
 8001766:	f000 fa39 	bl	8001bdc <HAL_ADC_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001770:	f000 f8a4 	bl	80018bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001778:	2301      	movs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_ADC1_Init+0x74>)
 8001786:	f000 fced 	bl	8002164 <HAL_ADC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001790:	f000 f894 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200000a8 	.word	0x200000a8
 80017a0:	40012400 	.word	0x40012400

080017a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017aa:	4a13      	ldr	r2, [pc, #76]	@ (80017f8 <MX_I2C1_Init+0x54>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017b0:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <MX_I2C1_Init+0x58>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017e2:	f001 f8f7 	bl	80029d4 <HAL_I2C_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017ec:	f000 f866 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200000d8 	.word	0x200000d8
 80017f8:	40005400 	.word	0x40005400
 80017fc:	000186a0 	.word	0x000186a0

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001814:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <MX_GPIO_Init+0xb0>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a25      	ldr	r2, [pc, #148]	@ (80018b0 <MX_GPIO_Init+0xb0>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b23      	ldr	r3, [pc, #140]	@ (80018b0 <MX_GPIO_Init+0xb0>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <MX_GPIO_Init+0xb0>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a1f      	ldr	r2, [pc, #124]	@ (80018b0 <MX_GPIO_Init+0xb0>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <MX_GPIO_Init+0xb0>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <MX_GPIO_Init+0xb0>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <MX_GPIO_Init+0xb0>)
 800184a:	f043 0308 	orr.w	r3, r3, #8
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <MX_GPIO_Init+0xb0>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2178      	movs	r1, #120	@ 0x78
 8001860:	4814      	ldr	r0, [pc, #80]	@ (80018b4 <MX_GPIO_Init+0xb4>)
 8001862:	f001 f87b 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001866:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2302      	movs	r3, #2
 8001872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4619      	mov	r1, r3
 800187a:	480f      	ldr	r0, [pc, #60]	@ (80018b8 <MX_GPIO_Init+0xb8>)
 800187c:	f000 feea 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001880:	2378      	movs	r3, #120	@ 0x78
 8001882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2302      	movs	r3, #2
 800188e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <MX_GPIO_Init+0xb4>)
 8001898:	f000 fedc 	bl	8002654 <HAL_GPIO_Init>

  /*Configures the port and pin on which the EVENTOUT Cortex signal will be connected */
  HAL_GPIOEx_ConfigEventout(AFIO_EVENTOUT_PORT_C, AFIO_EVENTOUT_PIN_13);
 800189c:	210d      	movs	r1, #13
 800189e:	2020      	movs	r0, #32
 80018a0:	f001 f874 	bl	800298c <HAL_GPIOEx_ConfigEventout>

  /*Enables the Event Output */
  HAL_GPIOEx_EnableEventout();
 80018a4:	f001 f888 	bl	80029b8 <HAL_GPIOEx_EnableEventout>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010800 	.word	0x40010800
 80018b8:	40011000 	.word	0x40011000

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <Error_Handler+0x8>

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_MspInit+0x5c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <HAL_MspInit+0x5c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <HAL_MspInit+0x5c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001924 <HAL_MspInit+0x5c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_MspInit+0x60>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <HAL_MspInit+0x60>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000

0800192c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a14      	ldr	r2, [pc, #80]	@ (8001998 <HAL_ADC_MspInit+0x6c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d121      	bne.n	8001990 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <HAL_ADC_MspInit+0x70>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a12      	ldr	r2, [pc, #72]	@ (800199c <HAL_ADC_MspInit+0x70>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b10      	ldr	r3, [pc, #64]	@ (800199c <HAL_ADC_MspInit+0x70>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <HAL_ADC_MspInit+0x70>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a0c      	ldr	r2, [pc, #48]	@ (800199c <HAL_ADC_MspInit+0x70>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <HAL_ADC_MspInit+0x70>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800197c:	2301      	movs	r3, #1
 800197e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001980:	2303      	movs	r3, #3
 8001982:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <HAL_ADC_MspInit+0x74>)
 800198c:	f000 fe62 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40012400 	.word	0x40012400
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010800 	.word	0x40010800

080019a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a15      	ldr	r2, [pc, #84]	@ (8001a14 <HAL_I2C_MspInit+0x70>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d123      	bne.n	8001a0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <HAL_I2C_MspInit+0x74>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a13      	ldr	r2, [pc, #76]	@ (8001a18 <HAL_I2C_MspInit+0x74>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <HAL_I2C_MspInit+0x74>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019dc:	23c0      	movs	r3, #192	@ 0xc0
 80019de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e0:	2312      	movs	r3, #18
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	480b      	ldr	r0, [pc, #44]	@ (8001a1c <HAL_I2C_MspInit+0x78>)
 80019f0:	f000 fe30 	bl	8002654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_I2C_MspInit+0x74>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_I2C_MspInit+0x74>)
 80019fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019fe:	61d3      	str	r3, [r2, #28]
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_I2C_MspInit+0x74>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40005400 	.word	0x40005400
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010c00 	.word	0x40010c00

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <NMI_Handler+0x4>

08001a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 f874 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a84:	f7ff fff8 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a8a:	490c      	ldr	r1, [pc, #48]	@ (8001abc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aa0:	4c09      	ldr	r4, [pc, #36]	@ (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f002 fa13 	bl	8003ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab2:	f7ff fd6d 	bl	8001590 <main>
  bx lr
 8001ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001ac0:	080052e8 	.word	0x080052e8
  ldr r2, =_sbss
 8001ac4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ac8:	20000290 	.word	0x20000290

08001acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_2_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad4:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <HAL_Init+0x28>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	@ (8001af8 <HAL_Init+0x28>)
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f000 fd83 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f000 f808 	bl	8001afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aec:	f7ff feec 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40022000 	.word	0x40022000

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <HAL_InitTick+0x54>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_InitTick+0x58>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fd8d 	bl	800263a <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00e      	b.n	8001b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d80a      	bhi.n	8001b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f000 fd63 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	@ (8001b58 <HAL_InitTick+0x5c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000010 	.word	0x20000010
 8001b54:	20000018 	.word	0x20000018
 8001b58:	20000014 	.word	0x20000014

08001b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_IncTick+0x1c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_IncTick+0x20>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a03      	ldr	r2, [pc, #12]	@ (8001b7c <HAL_IncTick+0x20>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000018 	.word	0x20000018
 8001b7c:	20000154 	.word	0x20000154

08001b80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b02      	ldr	r3, [pc, #8]	@ (8001b90 <HAL_GetTick+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000154 	.word	0x20000154

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff fff0 	bl	8001b80 <HAL_GetTick>
 8001ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d005      	beq.n	8001bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <HAL_Delay+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffe0 	bl	8001b80 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8f7      	bhi.n	8001bbc <HAL_Delay+0x28>
  {
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000018 	.word	0x20000018

08001bdc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0be      	b.n	8001d7c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fe86 	bl	800192c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fbf1 	bl	8002408 <ADC_ConversionStop_Disable>
 8001c26:	4603      	mov	r3, r0
 8001c28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 8099 	bne.w	8001d6a <HAL_ADC_Init+0x18e>
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 8095 	bne.w	8001d6a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c48:	f023 0302 	bic.w	r3, r3, #2
 8001c4c:	f043 0202 	orr.w	r2, r3, #2
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7b1b      	ldrb	r3, [r3, #12]
 8001c62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c74:	d003      	beq.n	8001c7e <HAL_ADC_Init+0xa2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d102      	bne.n	8001c84 <HAL_ADC_Init+0xa8>
 8001c7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_Init+0xaa>
 8001c84:	2300      	movs	r3, #0
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7d1b      	ldrb	r3, [r3, #20]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d119      	bne.n	8001cc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7b1b      	ldrb	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	035a      	lsls	r2, r3, #13
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	e00b      	b.n	8001cc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	4b28      	ldr	r3, [pc, #160]	@ (8001d84 <HAL_ADC_Init+0x1a8>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf8:	d003      	beq.n	8001d02 <HAL_ADC_Init+0x126>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d104      	bne.n	8001d0c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	051b      	lsls	r3, r3, #20
 8001d0a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <HAL_ADC_Init+0x1ac>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d10b      	bne.n	8001d48 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3a:	f023 0303 	bic.w	r3, r3, #3
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d46:	e018      	b.n	8001d7a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	f023 0312 	bic.w	r3, r3, #18
 8001d50:	f043 0210 	orr.w	r2, r3, #16
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d68:	e007      	b.n	8001d7a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	ffe1f7fd 	.word	0xffe1f7fd
 8001d88:	ff1f0efe 	.word	0xff1f0efe

08001d8c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Start+0x1a>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e098      	b.n	8001ed8 <HAL_ADC_Start+0x14c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fad0 	bl	8002354 <ADC_Enable>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8087 	bne.w	8001ece <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a41      	ldr	r2, [pc, #260]	@ (8001ee0 <HAL_ADC_Start+0x154>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_Start+0x5e>
 8001dde:	4b41      	ldr	r3, [pc, #260]	@ (8001ee4 <HAL_ADC_Start+0x158>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d115      	bne.n	8001e16 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d026      	beq.n	8001e52 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e14:	e01d      	b.n	8001e52 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee4 <HAL_ADC_Start+0x158>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d004      	beq.n	8001e36 <HAL_ADC_Start+0xaa>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee0 <HAL_ADC_Start+0x154>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10d      	bne.n	8001e52 <HAL_ADC_Start+0xc6>
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <HAL_ADC_Start+0x158>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	f023 0206 	bic.w	r2, r3, #6
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e6a:	e002      	b.n	8001e72 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f06f 0202 	mvn.w	r2, #2
 8001e82:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e8e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e92:	d113      	bne.n	8001ebc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e98:	4a11      	ldr	r2, [pc, #68]	@ (8001ee0 <HAL_ADC_Start+0x154>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d105      	bne.n	8001eaa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_ADC_Start+0x158>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d108      	bne.n	8001ebc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	e00c      	b.n	8001ed6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	e003      	b.n	8001ed6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40012800 	.word	0x40012800
 8001ee4:	40012400 	.word	0x40012400

08001ee8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Stop+0x1a>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e01a      	b.n	8001f38 <HAL_ADC_Stop+0x50>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa7c 	bl	8002408 <ADC_ConversionStop_Disable>
 8001f10:	4603      	mov	r3, r0
 8001f12:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f56:	f7ff fe13 	bl	8001b80 <HAL_GetTick>
 8001f5a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6e:	f043 0220 	orr.w	r2, r3, #32
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0d3      	b.n	800212a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d131      	bne.n	8001ff4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12a      	bne.n	8001ff4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f9e:	e021      	b.n	8001fe4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa6:	d01d      	beq.n	8001fe4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <HAL_ADC_PollForConversion+0x7e>
 8001fae:	f7ff fde7 	bl	8001b80 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d212      	bcs.n	8001fe4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	f043 0204 	orr.w	r2, r3, #4
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0a2      	b.n	800212a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0d6      	beq.n	8001fa0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ff2:	e070      	b.n	80020d6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8002134 <HAL_ADC_PollForConversion+0x1f4>)
 8001ff6:	681c      	ldr	r4, [r3, #0]
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f001 fe4d 	bl	8003c98 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ffe:	4603      	mov	r3, r0
 8002000:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6919      	ldr	r1, [r3, #16]
 800200a:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <HAL_ADC_PollForConversion+0x1f8>)
 800200c:	400b      	ands	r3, r1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_ADC_PollForConversion+0x104>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68d9      	ldr	r1, [r3, #12]
 8002018:	4b48      	ldr	r3, [pc, #288]	@ (800213c <HAL_ADC_PollForConversion+0x1fc>)
 800201a:	400b      	ands	r3, r1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d111      	bne.n	8002044 <HAL_ADC_PollForConversion+0x104>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6919      	ldr	r1, [r3, #16]
 8002026:	4b46      	ldr	r3, [pc, #280]	@ (8002140 <HAL_ADC_PollForConversion+0x200>)
 8002028:	400b      	ands	r3, r1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d108      	bne.n	8002040 <HAL_ADC_PollForConversion+0x100>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68d9      	ldr	r1, [r3, #12]
 8002034:	4b43      	ldr	r3, [pc, #268]	@ (8002144 <HAL_ADC_PollForConversion+0x204>)
 8002036:	400b      	ands	r3, r1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_ADC_PollForConversion+0x100>
 800203c:	2314      	movs	r3, #20
 800203e:	e020      	b.n	8002082 <HAL_ADC_PollForConversion+0x142>
 8002040:	2329      	movs	r3, #41	@ 0x29
 8002042:	e01e      	b.n	8002082 <HAL_ADC_PollForConversion+0x142>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6919      	ldr	r1, [r3, #16]
 800204a:	4b3d      	ldr	r3, [pc, #244]	@ (8002140 <HAL_ADC_PollForConversion+0x200>)
 800204c:	400b      	ands	r3, r1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_ADC_PollForConversion+0x120>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68d9      	ldr	r1, [r3, #12]
 8002058:	4b3a      	ldr	r3, [pc, #232]	@ (8002144 <HAL_ADC_PollForConversion+0x204>)
 800205a:	400b      	ands	r3, r1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00d      	beq.n	800207c <HAL_ADC_PollForConversion+0x13c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6919      	ldr	r1, [r3, #16]
 8002066:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <HAL_ADC_PollForConversion+0x208>)
 8002068:	400b      	ands	r3, r1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d108      	bne.n	8002080 <HAL_ADC_PollForConversion+0x140>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68d9      	ldr	r1, [r3, #12]
 8002074:	4b34      	ldr	r3, [pc, #208]	@ (8002148 <HAL_ADC_PollForConversion+0x208>)
 8002076:	400b      	ands	r3, r1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_ADC_PollForConversion+0x140>
 800207c:	2354      	movs	r3, #84	@ 0x54
 800207e:	e000      	b.n	8002082 <HAL_ADC_PollForConversion+0x142>
 8002080:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002088:	e021      	b.n	80020ce <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d01a      	beq.n	80020c8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_ADC_PollForConversion+0x168>
 8002098:	f7ff fd72 	bl	8001b80 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d20f      	bcs.n	80020c8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d90b      	bls.n	80020c8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	f043 0204 	orr.w	r2, r3, #4
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e030      	b.n	800212a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3301      	adds	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d8d9      	bhi.n	800208a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f06f 0212 	mvn.w	r2, #18
 80020de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020fa:	d115      	bne.n	8002128 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002100:	2b00      	cmp	r3, #0
 8002102:	d111      	bne.n	8002128 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	bf00      	nop
 8002134:	20000010 	.word	0x20000010
 8002138:	24924924 	.word	0x24924924
 800213c:	00924924 	.word	0x00924924
 8002140:	12492492 	.word	0x12492492
 8002144:	00492492 	.word	0x00492492
 8002148:	00249249 	.word	0x00249249

0800214c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x20>
 8002180:	2302      	movs	r3, #2
 8002182:	e0dc      	b.n	800233e <HAL_ADC_ConfigChannel+0x1da>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b06      	cmp	r3, #6
 8002192:	d81c      	bhi.n	80021ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3b05      	subs	r3, #5
 80021a6:	221f      	movs	r2, #31
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4019      	ands	r1, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	3b05      	subs	r3, #5
 80021c0:	fa00 f203 	lsl.w	r2, r0, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80021cc:	e03c      	b.n	8002248 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d81c      	bhi.n	8002210 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b23      	subs	r3, #35	@ 0x23
 80021e8:	221f      	movs	r2, #31
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4019      	ands	r1, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3b23      	subs	r3, #35	@ 0x23
 8002202:	fa00 f203 	lsl.w	r2, r0, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	631a      	str	r2, [r3, #48]	@ 0x30
 800220e:	e01b      	b.n	8002248 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	3b41      	subs	r3, #65	@ 0x41
 8002222:	221f      	movs	r2, #31
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	4019      	ands	r1, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	3b41      	subs	r3, #65	@ 0x41
 800223c:	fa00 f203 	lsl.w	r2, r0, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b09      	cmp	r3, #9
 800224e:	d91c      	bls.n	800228a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68d9      	ldr	r1, [r3, #12]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	3b1e      	subs	r3, #30
 8002262:	2207      	movs	r2, #7
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6898      	ldr	r0, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	3b1e      	subs	r3, #30
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	e019      	b.n	80022be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6919      	ldr	r1, [r3, #16]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	2207      	movs	r2, #7
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	4019      	ands	r1, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6898      	ldr	r0, [r3, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	fa00 f203 	lsl.w	r2, r0, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d003      	beq.n	80022ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022ca:	2b11      	cmp	r3, #17
 80022cc:	d132      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002348 <HAL_ADC_ConfigChannel+0x1e4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d125      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d126      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80022f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d11a      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022fe:	4b13      	ldr	r3, [pc, #76]	@ (800234c <HAL_ADC_ConfigChannel+0x1e8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a13      	ldr	r2, [pc, #76]	@ (8002350 <HAL_ADC_ConfigChannel+0x1ec>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	0c9a      	lsrs	r2, r3, #18
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002314:	e002      	b.n	800231c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3b01      	subs	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f9      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x1b2>
 8002322:	e007      	b.n	8002334 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800233c:	7bfb      	ldrb	r3, [r7, #15]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	40012400 	.word	0x40012400
 800234c:	20000010 	.word	0x20000010
 8002350:	431bde83 	.word	0x431bde83

08002354 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d040      	beq.n	80023f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002382:	4b1f      	ldr	r3, [pc, #124]	@ (8002400 <ADC_Enable+0xac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1f      	ldr	r2, [pc, #124]	@ (8002404 <ADC_Enable+0xb0>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	0c9b      	lsrs	r3, r3, #18
 800238e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002390:	e002      	b.n	8002398 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3b01      	subs	r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f9      	bne.n	8002392 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800239e:	f7ff fbef 	bl	8001b80 <HAL_GetTick>
 80023a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023a4:	e01f      	b.n	80023e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023a6:	f7ff fbeb 	bl	8001b80 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d918      	bls.n	80023e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d011      	beq.n	80023e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e007      	b.n	80023f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d1d8      	bne.n	80023a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000010 	.word	0x20000010
 8002404:	431bde83 	.word	0x431bde83

08002408 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d12e      	bne.n	8002480 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002432:	f7ff fba5 	bl	8001b80 <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002438:	e01b      	b.n	8002472 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800243a:	f7ff fba1 	bl	8001b80 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d914      	bls.n	8002472 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10d      	bne.n	8002472 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e007      	b.n	8002482 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d0dc      	beq.n	800243a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	@ (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	@ (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	@ 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff90 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff49 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff5e 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff90 	bl	8002544 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5f 	bl	80024f0 <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffb0 	bl	80025a8 <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b08b      	sub	sp, #44	@ 0x2c
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002666:	e169      	b.n	800293c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002668:	2201      	movs	r2, #1
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8158 	bne.w	8002936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a9a      	ldr	r2, [pc, #616]	@ (80028f4 <HAL_GPIO_Init+0x2a0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d05e      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 8002690:	4a98      	ldr	r2, [pc, #608]	@ (80028f4 <HAL_GPIO_Init+0x2a0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d875      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 8002696:	4a98      	ldr	r2, [pc, #608]	@ (80028f8 <HAL_GPIO_Init+0x2a4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d058      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 800269c:	4a96      	ldr	r2, [pc, #600]	@ (80028f8 <HAL_GPIO_Init+0x2a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d86f      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026a2:	4a96      	ldr	r2, [pc, #600]	@ (80028fc <HAL_GPIO_Init+0x2a8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d052      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026a8:	4a94      	ldr	r2, [pc, #592]	@ (80028fc <HAL_GPIO_Init+0x2a8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d869      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ae:	4a94      	ldr	r2, [pc, #592]	@ (8002900 <HAL_GPIO_Init+0x2ac>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d04c      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026b4:	4a92      	ldr	r2, [pc, #584]	@ (8002900 <HAL_GPIO_Init+0x2ac>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d863      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ba:	4a92      	ldr	r2, [pc, #584]	@ (8002904 <HAL_GPIO_Init+0x2b0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d046      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026c0:	4a90      	ldr	r2, [pc, #576]	@ (8002904 <HAL_GPIO_Init+0x2b0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d85d      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026c6:	2b12      	cmp	r3, #18
 80026c8:	d82a      	bhi.n	8002720 <HAL_GPIO_Init+0xcc>
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d859      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ce:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <HAL_GPIO_Init+0x80>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	0800274f 	.word	0x0800274f
 80026d8:	08002729 	.word	0x08002729
 80026dc:	0800273b 	.word	0x0800273b
 80026e0:	0800277d 	.word	0x0800277d
 80026e4:	08002783 	.word	0x08002783
 80026e8:	08002783 	.word	0x08002783
 80026ec:	08002783 	.word	0x08002783
 80026f0:	08002783 	.word	0x08002783
 80026f4:	08002783 	.word	0x08002783
 80026f8:	08002783 	.word	0x08002783
 80026fc:	08002783 	.word	0x08002783
 8002700:	08002783 	.word	0x08002783
 8002704:	08002783 	.word	0x08002783
 8002708:	08002783 	.word	0x08002783
 800270c:	08002783 	.word	0x08002783
 8002710:	08002783 	.word	0x08002783
 8002714:	08002783 	.word	0x08002783
 8002718:	08002731 	.word	0x08002731
 800271c:	08002745 	.word	0x08002745
 8002720:	4a79      	ldr	r2, [pc, #484]	@ (8002908 <HAL_GPIO_Init+0x2b4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002726:	e02c      	b.n	8002782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e029      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	3304      	adds	r3, #4
 8002736:	623b      	str	r3, [r7, #32]
          break;
 8002738:	e024      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	3308      	adds	r3, #8
 8002740:	623b      	str	r3, [r7, #32]
          break;
 8002742:	e01f      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	330c      	adds	r3, #12
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e01a      	b.n	8002784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002756:	2304      	movs	r3, #4
 8002758:	623b      	str	r3, [r7, #32]
          break;
 800275a:	e013      	b.n	8002784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002764:	2308      	movs	r3, #8
 8002766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	611a      	str	r2, [r3, #16]
          break;
 800276e:	e009      	b.n	8002784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002770:	2308      	movs	r3, #8
 8002772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	615a      	str	r2, [r3, #20]
          break;
 800277a:	e003      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x130>
          break;
 8002782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2bff      	cmp	r3, #255	@ 0xff
 8002788:	d801      	bhi.n	800278e <HAL_GPIO_Init+0x13a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_Init+0x13e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2bff      	cmp	r3, #255	@ 0xff
 8002798:	d802      	bhi.n	80027a0 <HAL_GPIO_Init+0x14c>
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x152>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	3b08      	subs	r3, #8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	210f      	movs	r1, #15
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	6a39      	ldr	r1, [r7, #32]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	431a      	orrs	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80b1 	beq.w	8002936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027d4:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <HAL_GPIO_Init+0x2b8>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a4c      	ldr	r2, [pc, #304]	@ (800290c <HAL_GPIO_Init+0x2b8>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b4a      	ldr	r3, [pc, #296]	@ (800290c <HAL_GPIO_Init+0x2b8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027ec:	4a48      	ldr	r2, [pc, #288]	@ (8002910 <HAL_GPIO_Init+0x2bc>)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a40      	ldr	r2, [pc, #256]	@ (8002914 <HAL_GPIO_Init+0x2c0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_GPIO_Init+0x1ec>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3f      	ldr	r2, [pc, #252]	@ (8002918 <HAL_GPIO_Init+0x2c4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00d      	beq.n	800283c <HAL_GPIO_Init+0x1e8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3e      	ldr	r2, [pc, #248]	@ (800291c <HAL_GPIO_Init+0x2c8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d007      	beq.n	8002838 <HAL_GPIO_Init+0x1e4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3d      	ldr	r2, [pc, #244]	@ (8002920 <HAL_GPIO_Init+0x2cc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_GPIO_Init+0x1e0>
 8002830:	2303      	movs	r3, #3
 8002832:	e006      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002834:	2304      	movs	r3, #4
 8002836:	e004      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002838:	2302      	movs	r3, #2
 800283a:	e002      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002840:	2300      	movs	r3, #0
 8002842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002844:	f002 0203 	and.w	r2, r2, #3
 8002848:	0092      	lsls	r2, r2, #2
 800284a:	4093      	lsls	r3, r2
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002852:	492f      	ldr	r1, [pc, #188]	@ (8002910 <HAL_GPIO_Init+0x2bc>)
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800286c:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	492c      	ldr	r1, [pc, #176]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800287a:	4b2a      	ldr	r3, [pc, #168]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	43db      	mvns	r3, r3
 8002882:	4928      	ldr	r1, [pc, #160]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 8002884:	4013      	ands	r3, r2
 8002886:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002894:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	4922      	ldr	r1, [pc, #136]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	60cb      	str	r3, [r1, #12]
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	491e      	ldr	r1, [pc, #120]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4918      	ldr	r1, [pc, #96]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ca:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4914      	ldr	r1, [pc, #80]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d021      	beq.n	8002928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	490e      	ldr	r1, [pc, #56]	@ (8002924 <HAL_GPIO_Init+0x2d0>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e021      	b.n	8002936 <HAL_GPIO_Init+0x2e2>
 80028f2:	bf00      	nop
 80028f4:	10320000 	.word	0x10320000
 80028f8:	10310000 	.word	0x10310000
 80028fc:	10220000 	.word	0x10220000
 8002900:	10210000 	.word	0x10210000
 8002904:	10120000 	.word	0x10120000
 8002908:	10110000 	.word	0x10110000
 800290c:	40021000 	.word	0x40021000
 8002910:	40010000 	.word	0x40010000
 8002914:	40010800 	.word	0x40010800
 8002918:	40010c00 	.word	0x40010c00
 800291c:	40011000 	.word	0x40011000
 8002920:	40011400 	.word	0x40011400
 8002924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_GPIO_Init+0x304>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	43db      	mvns	r3, r3
 8002930:	4909      	ldr	r1, [pc, #36]	@ (8002958 <HAL_GPIO_Init+0x304>)
 8002932:	4013      	ands	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	3301      	adds	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	f47f ae8e 	bne.w	8002668 <HAL_GPIO_Init+0x14>
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	372c      	adds	r7, #44	@ 0x2c
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40010400 	.word	0x40010400

0800295c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
 8002968:	4613      	mov	r3, r2
 800296a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002978:	e003      	b.n	8002982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 8002996:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <HAL_GPIOEx_ConfigEventout+0x28>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	430b      	orrs	r3, r1
 80029a4:	4903      	ldr	r1, [pc, #12]	@ (80029b4 <HAL_GPIOEx_ConfigEventout+0x28>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	40010000 	.word	0x40010000

080029b8 <HAL_GPIOEx_EnableEventout>:
/**
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <HAL_GPIOEx_EnableEventout+0x18>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a03      	ldr	r2, [pc, #12]	@ (80029d0 <HAL_GPIOEx_EnableEventout+0x18>)
 80029c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40010000 	.word	0x40010000

080029d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e12b      	b.n	8002c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe ffd2 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2224      	movs	r2, #36	@ 0x24
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a38:	f001 f832 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8002a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4a81      	ldr	r2, [pc, #516]	@ (8002c48 <HAL_I2C_Init+0x274>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d807      	bhi.n	8002a58 <HAL_I2C_Init+0x84>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a80      	ldr	r2, [pc, #512]	@ (8002c4c <HAL_I2C_Init+0x278>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e006      	b.n	8002a66 <HAL_I2C_Init+0x92>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c50 <HAL_I2C_Init+0x27c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	bf94      	ite	ls
 8002a60:	2301      	movls	r3, #1
 8002a62:	2300      	movhi	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0e7      	b.n	8002c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a78      	ldr	r2, [pc, #480]	@ (8002c54 <HAL_I2C_Init+0x280>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9b      	lsrs	r3, r3, #18
 8002a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c48 <HAL_I2C_Init+0x274>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d802      	bhi.n	8002aa8 <HAL_I2C_Init+0xd4>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	e009      	b.n	8002abc <HAL_I2C_Init+0xe8>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	4a69      	ldr	r2, [pc, #420]	@ (8002c58 <HAL_I2C_Init+0x284>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	3301      	adds	r3, #1
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ace:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	495c      	ldr	r1, [pc, #368]	@ (8002c48 <HAL_I2C_Init+0x274>)
 8002ad8:	428b      	cmp	r3, r1
 8002ada:	d819      	bhi.n	8002b10 <HAL_I2C_Init+0x13c>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e59      	subs	r1, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aea:	1c59      	adds	r1, r3, #1
 8002aec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002af0:	400b      	ands	r3, r1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_I2C_Init+0x138>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e59      	subs	r1, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0a:	e051      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	e04f      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <HAL_I2C_Init+0x168>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e012      	b.n	8002b62 <HAL_I2C_Init+0x18e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e58      	subs	r0, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	0099      	lsls	r1, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Init+0x196>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e022      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10e      	bne.n	8002b90 <HAL_I2C_Init+0x1bc>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1e58      	subs	r0, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	440b      	add	r3, r1
 8002b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8e:	e00f      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	0099      	lsls	r1, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	6809      	ldr	r1, [r1, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6911      	ldr	r1, [r2, #16]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	000186a0 	.word	0x000186a0
 8002c4c:	001e847f 	.word	0x001e847f
 8002c50:	003d08ff 	.word	0x003d08ff
 8002c54:	431bde83 	.word	0x431bde83
 8002c58:	10624dd3 	.word	0x10624dd3

08002c5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	460b      	mov	r3, r1
 8002c6a:	817b      	strh	r3, [r7, #10]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c70:	f7fe ff86 	bl	8001b80 <HAL_GetTick>
 8002c74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	f040 80e0 	bne.w	8002e44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2319      	movs	r3, #25
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4970      	ldr	r1, [pc, #448]	@ (8002e50 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f964 	bl	8002f5c <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0d3      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_I2C_Master_Transmit+0x50>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e0cc      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d007      	beq.n	8002cd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0201 	orr.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2221      	movs	r2, #33	@ 0x21
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2210      	movs	r2, #16
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	893a      	ldrh	r2, [r7, #8]
 8002d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a50      	ldr	r2, [pc, #320]	@ (8002e54 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d14:	8979      	ldrh	r1, [r7, #10]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f89c 	bl	8002e58 <I2C_MasterRequestWrite>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e08d      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d40:	e066      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	6a39      	ldr	r1, [r7, #32]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fa22 	bl	8003190 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d107      	bne.n	8002d6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e06b      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d11b      	bne.n	8002de4 <HAL_I2C_Master_Transmit+0x188>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d017      	beq.n	8002de4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	6a39      	ldr	r1, [r7, #32]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fa19 	bl	8003220 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d107      	bne.n	8002e0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e01a      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d194      	bne.n	8002d42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	00100002 	.word	0x00100002
 8002e54:	ffff0000 	.word	0xffff0000

08002e58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	460b      	mov	r3, r1
 8002e66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d006      	beq.n	8002e82 <I2C_MasterRequestWrite+0x2a>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d003      	beq.n	8002e82 <I2C_MasterRequestWrite+0x2a>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e80:	d108      	bne.n	8002e94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e00b      	b.n	8002eac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	2b12      	cmp	r3, #18
 8002e9a:	d107      	bne.n	8002eac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f84f 	bl	8002f5c <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed2:	d103      	bne.n	8002edc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e035      	b.n	8002f4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ee8:	d108      	bne.n	8002efc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eea:	897b      	ldrh	r3, [r7, #10]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef8:	611a      	str	r2, [r3, #16]
 8002efa:	e01b      	b.n	8002f34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002efc:	897b      	ldrh	r3, [r7, #10]
 8002efe:	11db      	asrs	r3, r3, #7
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0306 	and.w	r3, r3, #6
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f063 030f 	orn	r3, r3, #15
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	490e      	ldr	r1, [pc, #56]	@ (8002f54 <I2C_MasterRequestWrite+0xfc>)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f898 	bl	8003050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e010      	b.n	8002f4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4907      	ldr	r1, [pc, #28]	@ (8002f58 <I2C_MasterRequestWrite+0x100>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f888 	bl	8003050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	00010008 	.word	0x00010008
 8002f58:	00010002 	.word	0x00010002

08002f5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6c:	e048      	b.n	8003000 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d044      	beq.n	8003000 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f76:	f7fe fe03 	bl	8001b80 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d302      	bcc.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d139      	bne.n	8003000 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10d      	bne.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	e00c      	b.n	8002fcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d116      	bne.n	8003000 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e023      	b.n	8003048 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d10d      	bne.n	8003026 <I2C_WaitOnFlagUntilTimeout+0xca>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	e00c      	b.n	8003040 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	43da      	mvns	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	429a      	cmp	r2, r3
 8003044:	d093      	beq.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800305e:	e071      	b.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306e:	d123      	bne.n	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	f043 0204 	orr.w	r2, r3, #4
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e067      	b.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d041      	beq.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c0:	f7fe fd5e 	bl	8001b80 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d302      	bcc.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d136      	bne.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10c      	bne.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e00b      	b.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e021      	b.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d10c      	bne.n	8003168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	43da      	mvns	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4013      	ands	r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e00b      	b.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	f47f af6d 	bne.w	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800319c:	e034      	b.n	8003208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f886 	bl	80032b0 <I2C_IsAcknowledgeFailed>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e034      	b.n	8003218 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d028      	beq.n	8003208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7fe fce3 	bl	8001b80 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11d      	bne.n	8003208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d6:	2b80      	cmp	r3, #128	@ 0x80
 80031d8:	d016      	beq.n	8003208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e007      	b.n	8003218 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003212:	2b80      	cmp	r3, #128	@ 0x80
 8003214:	d1c3      	bne.n	800319e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800322c:	e034      	b.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f83e 	bl	80032b0 <I2C_IsAcknowledgeFailed>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e034      	b.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d028      	beq.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fe fc9b 	bl	8001b80 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11d      	bne.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d016      	beq.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e007      	b.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d1c3      	bne.n	800322e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c6:	d11b      	bne.n	8003300 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e272      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8087 	beq.w	800343a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800332c:	4b92      	ldr	r3, [pc, #584]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b04      	cmp	r3, #4
 8003336:	d00c      	beq.n	8003352 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003338:	4b8f      	ldr	r3, [pc, #572]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b08      	cmp	r3, #8
 8003342:	d112      	bne.n	800336a <HAL_RCC_OscConfig+0x5e>
 8003344:	4b8c      	ldr	r3, [pc, #560]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003350:	d10b      	bne.n	800336a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003352:	4b89      	ldr	r3, [pc, #548]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d06c      	beq.n	8003438 <HAL_RCC_OscConfig+0x12c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d168      	bne.n	8003438 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e24c      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x76>
 8003374:	4b80      	ldr	r3, [pc, #512]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a7f      	ldr	r2, [pc, #508]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 800337a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e02e      	b.n	80033e0 <HAL_RCC_OscConfig+0xd4>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x98>
 800338a:	4b7b      	ldr	r3, [pc, #492]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7a      	ldr	r2, [pc, #488]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b78      	ldr	r3, [pc, #480]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a77      	ldr	r2, [pc, #476]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 800339c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e01d      	b.n	80033e0 <HAL_RCC_OscConfig+0xd4>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0xbc>
 80033ae:	4b72      	ldr	r3, [pc, #456]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a71      	ldr	r2, [pc, #452]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6e      	ldr	r2, [pc, #440]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0xd4>
 80033c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80033ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b68      	ldr	r3, [pc, #416]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a67      	ldr	r2, [pc, #412]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80033da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe fbca 	bl	8001b80 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe fbc6 	bl	8001b80 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	@ 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e200      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	4b5d      	ldr	r3, [pc, #372]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0xe4>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fbb6 	bl	8001b80 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe fbb2 	bl	8001b80 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	@ 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1ec      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x10c>
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d063      	beq.n	800350e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003446:	4b4c      	ldr	r3, [pc, #304]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003452:	4b49      	ldr	r3, [pc, #292]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d11c      	bne.n	8003498 <HAL_RCC_OscConfig+0x18c>
 800345e:	4b46      	ldr	r3, [pc, #280]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d116      	bne.n	8003498 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	4b43      	ldr	r3, [pc, #268]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_RCC_OscConfig+0x176>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e1c0      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b3d      	ldr	r3, [pc, #244]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4939      	ldr	r1, [pc, #228]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	e03a      	b.n	800350e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d020      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a0:	4b36      	ldr	r3, [pc, #216]	@ (800357c <HAL_RCC_OscConfig+0x270>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe fb6b 	bl	8001b80 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fe fb67 	bl	8001b80 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e1a1      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4927      	ldr	r1, [pc, #156]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]
 80034e0:	e015      	b.n	800350e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e2:	4b26      	ldr	r3, [pc, #152]	@ (800357c <HAL_RCC_OscConfig+0x270>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe fb4a 	bl	8001b80 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f0:	f7fe fb46 	bl	8001b80 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e180      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d03a      	beq.n	8003590 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d019      	beq.n	8003556 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003522:	4b17      	ldr	r3, [pc, #92]	@ (8003580 <HAL_RCC_OscConfig+0x274>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fe fb2a 	bl	8001b80 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003530:	f7fe fb26 	bl	8001b80 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e160      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <HAL_RCC_OscConfig+0x26c>)
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800354e:	2001      	movs	r0, #1
 8003550:	f000 face 	bl	8003af0 <RCC_Delay>
 8003554:	e01c      	b.n	8003590 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003556:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <HAL_RCC_OscConfig+0x274>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fe fb10 	bl	8001b80 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003562:	e00f      	b.n	8003584 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003564:	f7fe fb0c 	bl	8001b80 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d908      	bls.n	8003584 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e146      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	42420000 	.word	0x42420000
 8003580:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b92      	ldr	r3, [pc, #584]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e9      	bne.n	8003564 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a6 	beq.w	80036ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b8b      	ldr	r3, [pc, #556]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	4b88      	ldr	r3, [pc, #544]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4a87      	ldr	r2, [pc, #540]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b8:	61d3      	str	r3, [r2, #28]
 80035ba:	4b85      	ldr	r3, [pc, #532]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ca:	4b82      	ldr	r3, [pc, #520]	@ (80037d4 <HAL_RCC_OscConfig+0x4c8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d118      	bne.n	8003608 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d6:	4b7f      	ldr	r3, [pc, #508]	@ (80037d4 <HAL_RCC_OscConfig+0x4c8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7e      	ldr	r2, [pc, #504]	@ (80037d4 <HAL_RCC_OscConfig+0x4c8>)
 80035dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e2:	f7fe facd 	bl	8001b80 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ea:	f7fe fac9 	bl	8001b80 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b64      	cmp	r3, #100	@ 0x64
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e103      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	4b75      	ldr	r3, [pc, #468]	@ (80037d4 <HAL_RCC_OscConfig+0x4c8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d106      	bne.n	800361e <HAL_RCC_OscConfig+0x312>
 8003610:	4b6f      	ldr	r3, [pc, #444]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4a6e      	ldr	r2, [pc, #440]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6213      	str	r3, [r2, #32]
 800361c:	e02d      	b.n	800367a <HAL_RCC_OscConfig+0x36e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0x334>
 8003626:	4b6a      	ldr	r3, [pc, #424]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4a69      	ldr	r2, [pc, #420]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6213      	str	r3, [r2, #32]
 8003632:	4b67      	ldr	r3, [pc, #412]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a66      	ldr	r2, [pc, #408]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	e01c      	b.n	800367a <HAL_RCC_OscConfig+0x36e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b05      	cmp	r3, #5
 8003646:	d10c      	bne.n	8003662 <HAL_RCC_OscConfig+0x356>
 8003648:	4b61      	ldr	r3, [pc, #388]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	4a60      	ldr	r2, [pc, #384]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 800364e:	f043 0304 	orr.w	r3, r3, #4
 8003652:	6213      	str	r3, [r2, #32]
 8003654:	4b5e      	ldr	r3, [pc, #376]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a5d      	ldr	r2, [pc, #372]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	e00b      	b.n	800367a <HAL_RCC_OscConfig+0x36e>
 8003662:	4b5b      	ldr	r3, [pc, #364]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	4a5a      	ldr	r2, [pc, #360]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	6213      	str	r3, [r2, #32]
 800366e:	4b58      	ldr	r3, [pc, #352]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a57      	ldr	r2, [pc, #348]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d015      	beq.n	80036ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003682:	f7fe fa7d 	bl	8001b80 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fe fa79 	bl	8001b80 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e0b1      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a0:	4b4b      	ldr	r3, [pc, #300]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0ee      	beq.n	800368a <HAL_RCC_OscConfig+0x37e>
 80036ac:	e014      	b.n	80036d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fe fa67 	bl	8001b80 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fe fa63 	bl	8001b80 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e09b      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036cc:	4b40      	ldr	r3, [pc, #256]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ee      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d105      	bne.n	80036ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036de:	4b3c      	ldr	r3, [pc, #240]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4a3b      	ldr	r2, [pc, #236]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8087 	beq.w	8003802 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f4:	4b36      	ldr	r3, [pc, #216]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d061      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d146      	bne.n	8003796 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	4b33      	ldr	r3, [pc, #204]	@ (80037d8 <HAL_RCC_OscConfig+0x4cc>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7fe fa37 	bl	8001b80 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003716:	f7fe fa33 	bl	8001b80 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e06d      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003728:	4b29      	ldr	r3, [pc, #164]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800373c:	d108      	bne.n	8003750 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	4921      	ldr	r1, [pc, #132]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003750:	4b1f      	ldr	r3, [pc, #124]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a19      	ldr	r1, [r3, #32]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	430b      	orrs	r3, r1
 8003762:	491b      	ldr	r1, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003768:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <HAL_RCC_OscConfig+0x4cc>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fe fa07 	bl	8001b80 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003776:	f7fe fa03 	bl	8001b80 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e03d      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x46a>
 8003794:	e035      	b.n	8003802 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <HAL_RCC_OscConfig+0x4cc>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe f9f0 	bl	8001b80 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe f9ec 	bl	8001b80 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e026      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b6:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x498>
 80037c2:	e01e      	b.n	8003802 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e019      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40007000 	.word	0x40007000
 80037d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_OscConfig+0x500>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d106      	bne.n	80037fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0d0      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003824:	4b6a      	ldr	r3, [pc, #424]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d910      	bls.n	8003854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b67      	ldr	r3, [pc, #412]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 0207 	bic.w	r2, r3, #7
 800383a:	4965      	ldr	r1, [pc, #404]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b63      	ldr	r3, [pc, #396]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0b8      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800386c:	4b59      	ldr	r3, [pc, #356]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a58      	ldr	r2, [pc, #352]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003884:	4b53      	ldr	r3, [pc, #332]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a52      	ldr	r2, [pc, #328]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800388e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	4b50      	ldr	r3, [pc, #320]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	494d      	ldr	r1, [pc, #308]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d040      	beq.n	8003930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	4b47      	ldr	r3, [pc, #284]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d115      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e07f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ce:	4b41      	ldr	r3, [pc, #260]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e073      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038de:	4b3d      	ldr	r3, [pc, #244]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e06b      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ee:	4b39      	ldr	r3, [pc, #228]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4936      	ldr	r1, [pc, #216]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003900:	f7fe f93e 	bl	8001b80 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	e00a      	b.n	800391e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003908:	f7fe f93a 	bl	8001b80 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e053      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	4b2d      	ldr	r3, [pc, #180]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 020c 	and.w	r2, r3, #12
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	429a      	cmp	r2, r3
 800392e:	d1eb      	bne.n	8003908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003930:	4b27      	ldr	r3, [pc, #156]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d210      	bcs.n	8003960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b24      	ldr	r3, [pc, #144]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 0207 	bic.w	r2, r3, #7
 8003946:	4922      	ldr	r1, [pc, #136]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e032      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800396c:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4916      	ldr	r1, [pc, #88]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800398a:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	490e      	ldr	r1, [pc, #56]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800399e:	f000 f821 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	490a      	ldr	r1, [pc, #40]	@ (80039d8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	5ccb      	ldrb	r3, [r1, r3]
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	4a09      	ldr	r2, [pc, #36]	@ (80039dc <HAL_RCC_ClockConfig+0x1cc>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ba:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <HAL_RCC_ClockConfig+0x1d0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe f89c 	bl	8001afc <HAL_InitTick>

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08005248 	.word	0x08005248
 80039dc:	20000010 	.word	0x20000010
 80039e0:	20000014 	.word	0x20000014

080039e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x30>
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x36>
 8003a12:	e027      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a14:	4b19      	ldr	r3, [pc, #100]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a16:	613b      	str	r3, [r7, #16]
      break;
 8003a18:	e027      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	0c9b      	lsrs	r3, r3, #18
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	4a17      	ldr	r2, [pc, #92]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a24:	5cd3      	ldrb	r3, [r2, r3]
 8003a26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d010      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a32:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	0c5b      	lsrs	r3, r3, #17
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	4a11      	ldr	r2, [pc, #68]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a0d      	ldr	r2, [pc, #52]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a46:	fb03 f202 	mul.w	r2, r3, r2
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e004      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a0c      	ldr	r2, [pc, #48]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	613b      	str	r3, [r7, #16]
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a66:	613b      	str	r3, [r7, #16]
      break;
 8003a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a6a:	693b      	ldr	r3, [r7, #16]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	007a1200 	.word	0x007a1200
 8003a80:	08005260 	.word	0x08005260
 8003a84:	08005270 	.word	0x08005270
 8003a88:	003d0900 	.word	0x003d0900

08003a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a90:	4b02      	ldr	r3, [pc, #8]	@ (8003a9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	20000010 	.word	0x20000010

08003aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aa4:	f7ff fff2 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	@ (8003ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	08005258 	.word	0x08005258

08003ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003acc:	f7ff ffde 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	0adb      	lsrs	r3, r3, #11
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4903      	ldr	r1, [pc, #12]	@ (8003aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	08005258 	.word	0x08005258

08003af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <RCC_Delay+0x34>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0a      	ldr	r2, [pc, #40]	@ (8003b28 <RCC_Delay+0x38>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0a5b      	lsrs	r3, r3, #9
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b0c:	bf00      	nop
  }
  while (Delay --);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1e5a      	subs	r2, r3, #1
 8003b12:	60fa      	str	r2, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <RCC_Delay+0x1c>
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	20000010 	.word	0x20000010
 8003b28:	10624dd3 	.word	0x10624dd3

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d07d      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b58:	4b4c      	ldr	r3, [pc, #304]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b62:	61d3      	str	r3, [r2, #28]
 8003b64:	4b49      	ldr	r3, [pc, #292]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b70:	2301      	movs	r3, #1
 8003b72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	4b46      	ldr	r3, [pc, #280]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d118      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b80:	4b43      	ldr	r3, [pc, #268]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a42      	ldr	r2, [pc, #264]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fff8 	bl	8001b80 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	e008      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b94:	f7fd fff4 	bl	8001b80 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e06d      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bb2:	4b36      	ldr	r3, [pc, #216]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d02e      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d027      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bda:	4b2e      	ldr	r3, [pc, #184]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003be0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003be6:	4a29      	ldr	r2, [pc, #164]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d014      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf6:	f7fd ffc3 	bl	8001b80 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fd ffbf 	bl	8001b80 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e036      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c14:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ee      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c20:	4b1a      	ldr	r3, [pc, #104]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4917      	ldr	r1, [pc, #92]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d105      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c38:	4b14      	ldr	r3, [pc, #80]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	4a13      	ldr	r2, [pc, #76]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c50:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	490b      	ldr	r1, [pc, #44]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6e:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	4904      	ldr	r1, [pc, #16]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40007000 	.word	0x40007000
 8003c94:	42420440 	.word	0x42420440

08003c98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	f200 808a 	bhi.w	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d045      	beq.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d075      	beq.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003cce:	e082      	b.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003cd0:	4b46      	ldr	r3, [pc, #280]	@ (8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003cd6:	4b45      	ldr	r3, [pc, #276]	@ (8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d07b      	beq.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	4a41      	ldr	r2, [pc, #260]	@ (8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003cec:	5cd3      	ldrb	r3, [r2, r3]
 8003cee:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d015      	beq.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	0c5b      	lsrs	r3, r3, #17
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	4a3b      	ldr	r2, [pc, #236]	@ (8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d14:	4a38      	ldr	r2, [pc, #224]	@ (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	e004      	b.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4a34      	ldr	r2, [pc, #208]	@ (8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d30:	4b2e      	ldr	r3, [pc, #184]	@ (8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d3c:	d102      	bne.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	61bb      	str	r3, [r7, #24]
      break;
 8003d42:	e04a      	b.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4a2d      	ldr	r2, [pc, #180]	@ (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]
      break;
 8003d52:	e042      	b.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003d54:	4b25      	ldr	r3, [pc, #148]	@ (8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d64:	d108      	bne.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e01f      	b.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d82:	d109      	bne.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d84:	4b19      	ldr	r3, [pc, #100]	@ (8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d90:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	e00f      	b.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da2:	d11c      	bne.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003da4:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d016      	beq.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003db0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003db4:	61bb      	str	r3, [r7, #24]
      break;
 8003db6:	e012      	b.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003db8:	e011      	b.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003dba:	f7ff fe85 	bl	8003ac8 <HAL_RCC_GetPCLK2Freq>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	0b9b      	lsrs	r3, r3, #14
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	61bb      	str	r3, [r7, #24]
      break;
 8003dd4:	e004      	b.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dde:	bf00      	nop
    }
  }
  return (frequency);
 8003de0:	69bb      	ldr	r3, [r7, #24]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000
 8003df0:	08005274 	.word	0x08005274
 8003df4:	08005284 	.word	0x08005284
 8003df8:	007a1200 	.word	0x007a1200
 8003dfc:	003d0900 	.word	0x003d0900
 8003e00:	aaaaaaab 	.word	0xaaaaaaab

08003e04 <__itoa>:
 8003e04:	1e93      	subs	r3, r2, #2
 8003e06:	2b22      	cmp	r3, #34	@ 0x22
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	d904      	bls.n	8003e18 <__itoa+0x14>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	461c      	mov	r4, r3
 8003e12:	700b      	strb	r3, [r1, #0]
 8003e14:	4620      	mov	r0, r4
 8003e16:	bd10      	pop	{r4, pc}
 8003e18:	2a0a      	cmp	r2, #10
 8003e1a:	d109      	bne.n	8003e30 <__itoa+0x2c>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	da07      	bge.n	8003e30 <__itoa+0x2c>
 8003e20:	232d      	movs	r3, #45	@ 0x2d
 8003e22:	700b      	strb	r3, [r1, #0]
 8003e24:	2101      	movs	r1, #1
 8003e26:	4240      	negs	r0, r0
 8003e28:	4421      	add	r1, r4
 8003e2a:	f000 f805 	bl	8003e38 <__utoa>
 8003e2e:	e7f1      	b.n	8003e14 <__itoa+0x10>
 8003e30:	2100      	movs	r1, #0
 8003e32:	e7f9      	b.n	8003e28 <__itoa+0x24>

08003e34 <itoa>:
 8003e34:	f7ff bfe6 	b.w	8003e04 <__itoa>

08003e38 <__utoa>:
 8003e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3a:	b08b      	sub	sp, #44	@ 0x2c
 8003e3c:	4605      	mov	r5, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	466e      	mov	r6, sp
 8003e42:	4c1d      	ldr	r4, [pc, #116]	@ (8003eb8 <__utoa+0x80>)
 8003e44:	f104 0c20 	add.w	ip, r4, #32
 8003e48:	4637      	mov	r7, r6
 8003e4a:	6820      	ldr	r0, [r4, #0]
 8003e4c:	6861      	ldr	r1, [r4, #4]
 8003e4e:	3408      	adds	r4, #8
 8003e50:	c703      	stmia	r7!, {r0, r1}
 8003e52:	4564      	cmp	r4, ip
 8003e54:	463e      	mov	r6, r7
 8003e56:	d1f7      	bne.n	8003e48 <__utoa+0x10>
 8003e58:	7921      	ldrb	r1, [r4, #4]
 8003e5a:	6820      	ldr	r0, [r4, #0]
 8003e5c:	7139      	strb	r1, [r7, #4]
 8003e5e:	1e91      	subs	r1, r2, #2
 8003e60:	2922      	cmp	r1, #34	@ 0x22
 8003e62:	6038      	str	r0, [r7, #0]
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	d904      	bls.n	8003e74 <__utoa+0x3c>
 8003e6a:	7019      	strb	r1, [r3, #0]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	b00b      	add	sp, #44	@ 0x2c
 8003e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e74:	1e58      	subs	r0, r3, #1
 8003e76:	4684      	mov	ip, r0
 8003e78:	fbb5 f7f2 	udiv	r7, r5, r2
 8003e7c:	fb02 5617 	mls	r6, r2, r7, r5
 8003e80:	3628      	adds	r6, #40	@ 0x28
 8003e82:	446e      	add	r6, sp
 8003e84:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003e88:	460c      	mov	r4, r1
 8003e8a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003e8e:	462e      	mov	r6, r5
 8003e90:	42b2      	cmp	r2, r6
 8003e92:	463d      	mov	r5, r7
 8003e94:	f101 0101 	add.w	r1, r1, #1
 8003e98:	d9ee      	bls.n	8003e78 <__utoa+0x40>
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	545a      	strb	r2, [r3, r1]
 8003e9e:	1919      	adds	r1, r3, r4
 8003ea0:	1aa5      	subs	r5, r4, r2
 8003ea2:	42aa      	cmp	r2, r5
 8003ea4:	dae3      	bge.n	8003e6e <__utoa+0x36>
 8003ea6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003eaa:	780e      	ldrb	r6, [r1, #0]
 8003eac:	3201      	adds	r2, #1
 8003eae:	7006      	strb	r6, [r0, #0]
 8003eb0:	f801 5901 	strb.w	r5, [r1], #-1
 8003eb4:	e7f4      	b.n	8003ea0 <__utoa+0x68>
 8003eb6:	bf00      	nop
 8003eb8:	08005286 	.word	0x08005286

08003ebc <memset>:
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4402      	add	r2, r0
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <memset+0xa>
 8003ec4:	4770      	bx	lr
 8003ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eca:	e7f9      	b.n	8003ec0 <memset+0x4>

08003ecc <__errno>:
 8003ecc:	4b01      	ldr	r3, [pc, #4]	@ (8003ed4 <__errno+0x8>)
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	2000001c 	.word	0x2000001c

08003ed8 <__libc_init_array>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	2600      	movs	r6, #0
 8003edc:	4d0c      	ldr	r5, [pc, #48]	@ (8003f10 <__libc_init_array+0x38>)
 8003ede:	4c0d      	ldr	r4, [pc, #52]	@ (8003f14 <__libc_init_array+0x3c>)
 8003ee0:	1b64      	subs	r4, r4, r5
 8003ee2:	10a4      	asrs	r4, r4, #2
 8003ee4:	42a6      	cmp	r6, r4
 8003ee6:	d109      	bne.n	8003efc <__libc_init_array+0x24>
 8003ee8:	f001 f990 	bl	800520c <_init>
 8003eec:	2600      	movs	r6, #0
 8003eee:	4d0a      	ldr	r5, [pc, #40]	@ (8003f18 <__libc_init_array+0x40>)
 8003ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8003f1c <__libc_init_array+0x44>)
 8003ef2:	1b64      	subs	r4, r4, r5
 8003ef4:	10a4      	asrs	r4, r4, #2
 8003ef6:	42a6      	cmp	r6, r4
 8003ef8:	d105      	bne.n	8003f06 <__libc_init_array+0x2e>
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
 8003efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f00:	4798      	blx	r3
 8003f02:	3601      	adds	r6, #1
 8003f04:	e7ee      	b.n	8003ee4 <__libc_init_array+0xc>
 8003f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0a:	4798      	blx	r3
 8003f0c:	3601      	adds	r6, #1
 8003f0e:	e7f2      	b.n	8003ef6 <__libc_init_array+0x1e>
 8003f10:	080052e0 	.word	0x080052e0
 8003f14:	080052e0 	.word	0x080052e0
 8003f18:	080052e0 	.word	0x080052e0
 8003f1c:	080052e4 	.word	0x080052e4

08003f20 <log10>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	4604      	mov	r4, r0
 8003f24:	460d      	mov	r5, r1
 8003f26:	f000 f8a3 	bl	8004070 <__ieee754_log10>
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	460f      	mov	r7, r1
 8003f30:	462b      	mov	r3, r5
 8003f32:	4620      	mov	r0, r4
 8003f34:	4629      	mov	r1, r5
 8003f36:	f7fc fd61 	bl	80009fc <__aeabi_dcmpun>
 8003f3a:	b998      	cbnz	r0, 8003f64 <log10+0x44>
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2300      	movs	r3, #0
 8003f40:	4620      	mov	r0, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	f7fc fd3c 	bl	80009c0 <__aeabi_dcmple>
 8003f48:	b160      	cbz	r0, 8003f64 <log10+0x44>
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	4620      	mov	r0, r4
 8003f50:	4629      	mov	r1, r5
 8003f52:	f7fc fd21 	bl	8000998 <__aeabi_dcmpeq>
 8003f56:	b140      	cbz	r0, 8003f6a <log10+0x4a>
 8003f58:	f7ff ffb8 	bl	8003ecc <__errno>
 8003f5c:	2322      	movs	r3, #34	@ 0x22
 8003f5e:	2600      	movs	r6, #0
 8003f60:	4f06      	ldr	r7, [pc, #24]	@ (8003f7c <log10+0x5c>)
 8003f62:	6003      	str	r3, [r0, #0]
 8003f64:	4630      	mov	r0, r6
 8003f66:	4639      	mov	r1, r7
 8003f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f6a:	f7ff ffaf 	bl	8003ecc <__errno>
 8003f6e:	2321      	movs	r3, #33	@ 0x21
 8003f70:	6003      	str	r3, [r0, #0]
 8003f72:	4803      	ldr	r0, [pc, #12]	@ (8003f80 <log10+0x60>)
 8003f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f78:	f000 b872 	b.w	8004060 <nan>
 8003f7c:	fff00000 	.word	0xfff00000
 8003f80:	080052aa 	.word	0x080052aa

08003f84 <pow>:
 8003f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f88:	4614      	mov	r4, r2
 8003f8a:	461d      	mov	r5, r3
 8003f8c:	4680      	mov	r8, r0
 8003f8e:	4689      	mov	r9, r1
 8003f90:	f000 f8ea 	bl	8004168 <__ieee754_pow>
 8003f94:	4622      	mov	r2, r4
 8003f96:	4606      	mov	r6, r0
 8003f98:	460f      	mov	r7, r1
 8003f9a:	462b      	mov	r3, r5
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7fc fd2c 	bl	80009fc <__aeabi_dcmpun>
 8003fa4:	bbc8      	cbnz	r0, 800401a <pow+0x96>
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4640      	mov	r0, r8
 8003fac:	4649      	mov	r1, r9
 8003fae:	f7fc fcf3 	bl	8000998 <__aeabi_dcmpeq>
 8003fb2:	b1b8      	cbz	r0, 8003fe4 <pow+0x60>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	4620      	mov	r0, r4
 8003fba:	4629      	mov	r1, r5
 8003fbc:	f7fc fcec 	bl	8000998 <__aeabi_dcmpeq>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d141      	bne.n	8004048 <pow+0xc4>
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	f000 f844 	bl	8004054 <finite>
 8003fcc:	b328      	cbz	r0, 800401a <pow+0x96>
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	f7fc fce9 	bl	80009ac <__aeabi_dcmplt>
 8003fda:	b1f0      	cbz	r0, 800401a <pow+0x96>
 8003fdc:	f7ff ff76 	bl	8003ecc <__errno>
 8003fe0:	2322      	movs	r3, #34	@ 0x22
 8003fe2:	e019      	b.n	8004018 <pow+0x94>
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	4639      	mov	r1, r7
 8003fe8:	f000 f834 	bl	8004054 <finite>
 8003fec:	b9c8      	cbnz	r0, 8004022 <pow+0x9e>
 8003fee:	4640      	mov	r0, r8
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	f000 f82f 	bl	8004054 <finite>
 8003ff6:	b1a0      	cbz	r0, 8004022 <pow+0x9e>
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	f000 f82a 	bl	8004054 <finite>
 8004000:	b178      	cbz	r0, 8004022 <pow+0x9e>
 8004002:	4632      	mov	r2, r6
 8004004:	463b      	mov	r3, r7
 8004006:	4630      	mov	r0, r6
 8004008:	4639      	mov	r1, r7
 800400a:	f7fc fcf7 	bl	80009fc <__aeabi_dcmpun>
 800400e:	2800      	cmp	r0, #0
 8004010:	d0e4      	beq.n	8003fdc <pow+0x58>
 8004012:	f7ff ff5b 	bl	8003ecc <__errno>
 8004016:	2321      	movs	r3, #33	@ 0x21
 8004018:	6003      	str	r3, [r0, #0]
 800401a:	4630      	mov	r0, r6
 800401c:	4639      	mov	r1, r7
 800401e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004022:	2200      	movs	r2, #0
 8004024:	2300      	movs	r3, #0
 8004026:	4630      	mov	r0, r6
 8004028:	4639      	mov	r1, r7
 800402a:	f7fc fcb5 	bl	8000998 <__aeabi_dcmpeq>
 800402e:	2800      	cmp	r0, #0
 8004030:	d0f3      	beq.n	800401a <pow+0x96>
 8004032:	4640      	mov	r0, r8
 8004034:	4649      	mov	r1, r9
 8004036:	f000 f80d 	bl	8004054 <finite>
 800403a:	2800      	cmp	r0, #0
 800403c:	d0ed      	beq.n	800401a <pow+0x96>
 800403e:	4620      	mov	r0, r4
 8004040:	4629      	mov	r1, r5
 8004042:	f000 f807 	bl	8004054 <finite>
 8004046:	e7c8      	b.n	8003fda <pow+0x56>
 8004048:	2600      	movs	r6, #0
 800404a:	4f01      	ldr	r7, [pc, #4]	@ (8004050 <pow+0xcc>)
 800404c:	e7e5      	b.n	800401a <pow+0x96>
 800404e:	bf00      	nop
 8004050:	3ff00000 	.word	0x3ff00000

08004054 <finite>:
 8004054:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8004058:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800405c:	0fc0      	lsrs	r0, r0, #31
 800405e:	4770      	bx	lr

08004060 <nan>:
 8004060:	2000      	movs	r0, #0
 8004062:	4901      	ldr	r1, [pc, #4]	@ (8004068 <nan+0x8>)
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	7ff80000 	.word	0x7ff80000
 800406c:	00000000 	.word	0x00000000

08004070 <__ieee754_log10>:
 8004070:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004078:	4604      	mov	r4, r0
 800407a:	460d      	mov	r5, r1
 800407c:	460b      	mov	r3, r1
 800407e:	da26      	bge.n	80040ce <__ieee754_log10+0x5e>
 8004080:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8004084:	4302      	orrs	r2, r0
 8004086:	d107      	bne.n	8004098 <__ieee754_log10+0x28>
 8004088:	2200      	movs	r2, #0
 800408a:	2300      	movs	r3, #0
 800408c:	2000      	movs	r0, #0
 800408e:	4932      	ldr	r1, [pc, #200]	@ (8004158 <__ieee754_log10+0xe8>)
 8004090:	f7fc fb44 	bl	800071c <__aeabi_ddiv>
 8004094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004098:	2900      	cmp	r1, #0
 800409a:	da05      	bge.n	80040a8 <__ieee754_log10+0x38>
 800409c:	4602      	mov	r2, r0
 800409e:	f7fc f85b 	bl	8000158 <__aeabi_dsub>
 80040a2:	2200      	movs	r2, #0
 80040a4:	2300      	movs	r3, #0
 80040a6:	e7f3      	b.n	8004090 <__ieee754_log10+0x20>
 80040a8:	2200      	movs	r2, #0
 80040aa:	4b2c      	ldr	r3, [pc, #176]	@ (800415c <__ieee754_log10+0xec>)
 80040ac:	f7fc fa0c 	bl	80004c8 <__aeabi_dmul>
 80040b0:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 80040b4:	4604      	mov	r4, r0
 80040b6:	460d      	mov	r5, r1
 80040b8:	460b      	mov	r3, r1
 80040ba:	4929      	ldr	r1, [pc, #164]	@ (8004160 <__ieee754_log10+0xf0>)
 80040bc:	428b      	cmp	r3, r1
 80040be:	dd08      	ble.n	80040d2 <__ieee754_log10+0x62>
 80040c0:	4622      	mov	r2, r4
 80040c2:	462b      	mov	r3, r5
 80040c4:	4620      	mov	r0, r4
 80040c6:	4629      	mov	r1, r5
 80040c8:	f7fc f848 	bl	800015c <__adddf3>
 80040cc:	e7e2      	b.n	8004094 <__ieee754_log10+0x24>
 80040ce:	2200      	movs	r2, #0
 80040d0:	e7f3      	b.n	80040ba <__ieee754_log10+0x4a>
 80040d2:	1518      	asrs	r0, r3, #20
 80040d4:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 80040d8:	4410      	add	r0, r2
 80040da:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80040de:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80040e2:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80040e6:	f7fc f985 	bl	80003f4 <__aeabi_i2d>
 80040ea:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 80040ee:	3303      	adds	r3, #3
 80040f0:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80040f4:	a312      	add	r3, pc, #72	@ (adr r3, 8004140 <__ieee754_log10+0xd0>)
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	4606      	mov	r6, r0
 80040fc:	460f      	mov	r7, r1
 80040fe:	f7fc f9e3 	bl	80004c8 <__aeabi_dmul>
 8004102:	4680      	mov	r8, r0
 8004104:	4689      	mov	r9, r1
 8004106:	4620      	mov	r0, r4
 8004108:	4629      	mov	r1, r5
 800410a:	f000 fecd 	bl	8004ea8 <__ieee754_log>
 800410e:	a30e      	add	r3, pc, #56	@ (adr r3, 8004148 <__ieee754_log10+0xd8>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f7fc f9d8 	bl	80004c8 <__aeabi_dmul>
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	f7fc f81e 	bl	800015c <__adddf3>
 8004120:	a30b      	add	r3, pc, #44	@ (adr r3, 8004150 <__ieee754_log10+0xe0>)
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	4604      	mov	r4, r0
 8004128:	460d      	mov	r5, r1
 800412a:	4630      	mov	r0, r6
 800412c:	4639      	mov	r1, r7
 800412e:	f7fc f9cb 	bl	80004c8 <__aeabi_dmul>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4620      	mov	r0, r4
 8004138:	4629      	mov	r1, r5
 800413a:	e7c5      	b.n	80040c8 <__ieee754_log10+0x58>
 800413c:	f3af 8000 	nop.w
 8004140:	11f12b36 	.word	0x11f12b36
 8004144:	3d59fef3 	.word	0x3d59fef3
 8004148:	1526e50e 	.word	0x1526e50e
 800414c:	3fdbcb7b 	.word	0x3fdbcb7b
 8004150:	509f6000 	.word	0x509f6000
 8004154:	3fd34413 	.word	0x3fd34413
 8004158:	c3500000 	.word	0xc3500000
 800415c:	43500000 	.word	0x43500000
 8004160:	7fefffff 	.word	0x7fefffff
 8004164:	00000000 	.word	0x00000000

08004168 <__ieee754_pow>:
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	b091      	sub	sp, #68	@ 0x44
 800416e:	e9cd 2300 	strd	r2, r3, [sp]
 8004172:	468b      	mov	fp, r1
 8004174:	e9dd 1800 	ldrd	r1, r8, [sp]
 8004178:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800417c:	4682      	mov	sl, r0
 800417e:	ea57 0001 	orrs.w	r0, r7, r1
 8004182:	d112      	bne.n	80041aa <__ieee754_pow+0x42>
 8004184:	4653      	mov	r3, sl
 8004186:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800418a:	18db      	adds	r3, r3, r3
 800418c:	4152      	adcs	r2, r2
 800418e:	4298      	cmp	r0, r3
 8004190:	4b91      	ldr	r3, [pc, #580]	@ (80043d8 <__ieee754_pow+0x270>)
 8004192:	4193      	sbcs	r3, r2
 8004194:	f080 84ce 	bcs.w	8004b34 <__ieee754_pow+0x9cc>
 8004198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800419c:	4650      	mov	r0, sl
 800419e:	4659      	mov	r1, fp
 80041a0:	f7fb ffdc 	bl	800015c <__adddf3>
 80041a4:	b011      	add	sp, #68	@ 0x44
 80041a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041aa:	4b8c      	ldr	r3, [pc, #560]	@ (80043dc <__ieee754_pow+0x274>)
 80041ac:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80041b0:	429e      	cmp	r6, r3
 80041b2:	465d      	mov	r5, fp
 80041b4:	46d1      	mov	r9, sl
 80041b6:	d807      	bhi.n	80041c8 <__ieee754_pow+0x60>
 80041b8:	d102      	bne.n	80041c0 <__ieee754_pow+0x58>
 80041ba:	f1ba 0f00 	cmp.w	sl, #0
 80041be:	d1eb      	bne.n	8004198 <__ieee754_pow+0x30>
 80041c0:	429f      	cmp	r7, r3
 80041c2:	d801      	bhi.n	80041c8 <__ieee754_pow+0x60>
 80041c4:	d10f      	bne.n	80041e6 <__ieee754_pow+0x7e>
 80041c6:	b171      	cbz	r1, 80041e6 <__ieee754_pow+0x7e>
 80041c8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80041cc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80041d0:	ea55 0509 	orrs.w	r5, r5, r9
 80041d4:	d1e0      	bne.n	8004198 <__ieee754_pow+0x30>
 80041d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80041da:	18db      	adds	r3, r3, r3
 80041dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80041e0:	4152      	adcs	r2, r2
 80041e2:	429d      	cmp	r5, r3
 80041e4:	e7d4      	b.n	8004190 <__ieee754_pow+0x28>
 80041e6:	2d00      	cmp	r5, #0
 80041e8:	4633      	mov	r3, r6
 80041ea:	da39      	bge.n	8004260 <__ieee754_pow+0xf8>
 80041ec:	4a7c      	ldr	r2, [pc, #496]	@ (80043e0 <__ieee754_pow+0x278>)
 80041ee:	4297      	cmp	r7, r2
 80041f0:	d84e      	bhi.n	8004290 <__ieee754_pow+0x128>
 80041f2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80041f6:	4297      	cmp	r7, r2
 80041f8:	f240 84ab 	bls.w	8004b52 <__ieee754_pow+0x9ea>
 80041fc:	153a      	asrs	r2, r7, #20
 80041fe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004202:	2a14      	cmp	r2, #20
 8004204:	dd0f      	ble.n	8004226 <__ieee754_pow+0xbe>
 8004206:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800420a:	fa21 f402 	lsr.w	r4, r1, r2
 800420e:	fa04 f202 	lsl.w	r2, r4, r2
 8004212:	428a      	cmp	r2, r1
 8004214:	f040 849d 	bne.w	8004b52 <__ieee754_pow+0x9ea>
 8004218:	f004 0401 	and.w	r4, r4, #1
 800421c:	f1c4 0402 	rsb	r4, r4, #2
 8004220:	2900      	cmp	r1, #0
 8004222:	d15a      	bne.n	80042da <__ieee754_pow+0x172>
 8004224:	e00e      	b.n	8004244 <__ieee754_pow+0xdc>
 8004226:	2900      	cmp	r1, #0
 8004228:	d156      	bne.n	80042d8 <__ieee754_pow+0x170>
 800422a:	f1c2 0214 	rsb	r2, r2, #20
 800422e:	fa47 f402 	asr.w	r4, r7, r2
 8004232:	fa04 f202 	lsl.w	r2, r4, r2
 8004236:	42ba      	cmp	r2, r7
 8004238:	f040 8488 	bne.w	8004b4c <__ieee754_pow+0x9e4>
 800423c:	f004 0401 	and.w	r4, r4, #1
 8004240:	f1c4 0402 	rsb	r4, r4, #2
 8004244:	4a67      	ldr	r2, [pc, #412]	@ (80043e4 <__ieee754_pow+0x27c>)
 8004246:	4297      	cmp	r7, r2
 8004248:	d130      	bne.n	80042ac <__ieee754_pow+0x144>
 800424a:	f1b8 0f00 	cmp.w	r8, #0
 800424e:	f280 8479 	bge.w	8004b44 <__ieee754_pow+0x9dc>
 8004252:	4652      	mov	r2, sl
 8004254:	465b      	mov	r3, fp
 8004256:	2000      	movs	r0, #0
 8004258:	4962      	ldr	r1, [pc, #392]	@ (80043e4 <__ieee754_pow+0x27c>)
 800425a:	f7fc fa5f 	bl	800071c <__aeabi_ddiv>
 800425e:	e7a1      	b.n	80041a4 <__ieee754_pow+0x3c>
 8004260:	2400      	movs	r4, #0
 8004262:	2900      	cmp	r1, #0
 8004264:	d139      	bne.n	80042da <__ieee754_pow+0x172>
 8004266:	4a5d      	ldr	r2, [pc, #372]	@ (80043dc <__ieee754_pow+0x274>)
 8004268:	4297      	cmp	r7, r2
 800426a:	d1eb      	bne.n	8004244 <__ieee754_pow+0xdc>
 800426c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8004270:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8004274:	ea53 0309 	orrs.w	r3, r3, r9
 8004278:	f000 845c 	beq.w	8004b34 <__ieee754_pow+0x9cc>
 800427c:	4b5a      	ldr	r3, [pc, #360]	@ (80043e8 <__ieee754_pow+0x280>)
 800427e:	429e      	cmp	r6, r3
 8004280:	d908      	bls.n	8004294 <__ieee754_pow+0x12c>
 8004282:	f1b8 0f00 	cmp.w	r8, #0
 8004286:	f2c0 8459 	blt.w	8004b3c <__ieee754_pow+0x9d4>
 800428a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800428e:	e789      	b.n	80041a4 <__ieee754_pow+0x3c>
 8004290:	2402      	movs	r4, #2
 8004292:	e7e6      	b.n	8004262 <__ieee754_pow+0xfa>
 8004294:	f1b8 0f00 	cmp.w	r8, #0
 8004298:	f04f 0000 	mov.w	r0, #0
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	da80      	bge.n	80041a4 <__ieee754_pow+0x3c>
 80042a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80042a6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80042aa:	e77b      	b.n	80041a4 <__ieee754_pow+0x3c>
 80042ac:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80042b0:	d106      	bne.n	80042c0 <__ieee754_pow+0x158>
 80042b2:	4652      	mov	r2, sl
 80042b4:	465b      	mov	r3, fp
 80042b6:	4650      	mov	r0, sl
 80042b8:	4659      	mov	r1, fp
 80042ba:	f7fc f905 	bl	80004c8 <__aeabi_dmul>
 80042be:	e771      	b.n	80041a4 <__ieee754_pow+0x3c>
 80042c0:	4a4a      	ldr	r2, [pc, #296]	@ (80043ec <__ieee754_pow+0x284>)
 80042c2:	4590      	cmp	r8, r2
 80042c4:	d109      	bne.n	80042da <__ieee754_pow+0x172>
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	db07      	blt.n	80042da <__ieee754_pow+0x172>
 80042ca:	4650      	mov	r0, sl
 80042cc:	4659      	mov	r1, fp
 80042ce:	b011      	add	sp, #68	@ 0x44
 80042d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	f000 bd12 	b.w	8004cfc <__ieee754_sqrt>
 80042d8:	2400      	movs	r4, #0
 80042da:	4650      	mov	r0, sl
 80042dc:	4659      	mov	r1, fp
 80042de:	9302      	str	r3, [sp, #8]
 80042e0:	f000 fc6a 	bl	8004bb8 <fabs>
 80042e4:	9b02      	ldr	r3, [sp, #8]
 80042e6:	f1b9 0f00 	cmp.w	r9, #0
 80042ea:	d127      	bne.n	800433c <__ieee754_pow+0x1d4>
 80042ec:	4a3d      	ldr	r2, [pc, #244]	@ (80043e4 <__ieee754_pow+0x27c>)
 80042ee:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80042f2:	4594      	cmp	ip, r2
 80042f4:	d000      	beq.n	80042f8 <__ieee754_pow+0x190>
 80042f6:	bb0e      	cbnz	r6, 800433c <__ieee754_pow+0x1d4>
 80042f8:	f1b8 0f00 	cmp.w	r8, #0
 80042fc:	da05      	bge.n	800430a <__ieee754_pow+0x1a2>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	2000      	movs	r0, #0
 8004304:	4937      	ldr	r1, [pc, #220]	@ (80043e4 <__ieee754_pow+0x27c>)
 8004306:	f7fc fa09 	bl	800071c <__aeabi_ddiv>
 800430a:	2d00      	cmp	r5, #0
 800430c:	f6bf af4a 	bge.w	80041a4 <__ieee754_pow+0x3c>
 8004310:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004314:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004318:	4326      	orrs	r6, r4
 800431a:	d108      	bne.n	800432e <__ieee754_pow+0x1c6>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	f7fb ff18 	bl	8000158 <__aeabi_dsub>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	e795      	b.n	800425a <__ieee754_pow+0xf2>
 800432e:	2c01      	cmp	r4, #1
 8004330:	f47f af38 	bne.w	80041a4 <__ieee754_pow+0x3c>
 8004334:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004338:	4619      	mov	r1, r3
 800433a:	e733      	b.n	80041a4 <__ieee754_pow+0x3c>
 800433c:	0fea      	lsrs	r2, r5, #31
 800433e:	3a01      	subs	r2, #1
 8004340:	ea52 0c04 	orrs.w	ip, r2, r4
 8004344:	d102      	bne.n	800434c <__ieee754_pow+0x1e4>
 8004346:	4652      	mov	r2, sl
 8004348:	465b      	mov	r3, fp
 800434a:	e7e9      	b.n	8004320 <__ieee754_pow+0x1b8>
 800434c:	f04f 0900 	mov.w	r9, #0
 8004350:	3c01      	subs	r4, #1
 8004352:	4314      	orrs	r4, r2
 8004354:	bf14      	ite	ne
 8004356:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80043e4 <__ieee754_pow+0x27c>
 800435a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80043f0 <__ieee754_pow+0x288>
 800435e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8004362:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8004366:	f240 8107 	bls.w	8004578 <__ieee754_pow+0x410>
 800436a:	4b22      	ldr	r3, [pc, #136]	@ (80043f4 <__ieee754_pow+0x28c>)
 800436c:	429f      	cmp	r7, r3
 800436e:	4b1e      	ldr	r3, [pc, #120]	@ (80043e8 <__ieee754_pow+0x280>)
 8004370:	d913      	bls.n	800439a <__ieee754_pow+0x232>
 8004372:	429e      	cmp	r6, r3
 8004374:	d808      	bhi.n	8004388 <__ieee754_pow+0x220>
 8004376:	f1b8 0f00 	cmp.w	r8, #0
 800437a:	da08      	bge.n	800438e <__ieee754_pow+0x226>
 800437c:	2000      	movs	r0, #0
 800437e:	b011      	add	sp, #68	@ 0x44
 8004380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	f000 bcb4 	b.w	8004cf0 <__math_oflow>
 8004388:	f1b8 0f00 	cmp.w	r8, #0
 800438c:	dcf6      	bgt.n	800437c <__ieee754_pow+0x214>
 800438e:	2000      	movs	r0, #0
 8004390:	b011      	add	sp, #68	@ 0x44
 8004392:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004396:	f000 bca6 	b.w	8004ce6 <__math_uflow>
 800439a:	429e      	cmp	r6, r3
 800439c:	d20c      	bcs.n	80043b8 <__ieee754_pow+0x250>
 800439e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	2300      	movs	r3, #0
 80043a6:	f7fc fb01 	bl	80009ac <__aeabi_dcmplt>
 80043aa:	3800      	subs	r0, #0
 80043ac:	bf18      	it	ne
 80043ae:	2001      	movne	r0, #1
 80043b0:	f1b8 0f00 	cmp.w	r8, #0
 80043b4:	daec      	bge.n	8004390 <__ieee754_pow+0x228>
 80043b6:	e7e2      	b.n	800437e <__ieee754_pow+0x216>
 80043b8:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <__ieee754_pow+0x27c>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	429e      	cmp	r6, r3
 80043be:	d91b      	bls.n	80043f8 <__ieee754_pow+0x290>
 80043c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043c4:	2300      	movs	r3, #0
 80043c6:	f7fc faf1 	bl	80009ac <__aeabi_dcmplt>
 80043ca:	3800      	subs	r0, #0
 80043cc:	bf18      	it	ne
 80043ce:	2001      	movne	r0, #1
 80043d0:	f1b8 0f00 	cmp.w	r8, #0
 80043d4:	dcd3      	bgt.n	800437e <__ieee754_pow+0x216>
 80043d6:	e7db      	b.n	8004390 <__ieee754_pow+0x228>
 80043d8:	fff00000 	.word	0xfff00000
 80043dc:	7ff00000 	.word	0x7ff00000
 80043e0:	433fffff 	.word	0x433fffff
 80043e4:	3ff00000 	.word	0x3ff00000
 80043e8:	3fefffff 	.word	0x3fefffff
 80043ec:	3fe00000 	.word	0x3fe00000
 80043f0:	bff00000 	.word	0xbff00000
 80043f4:	43f00000 	.word	0x43f00000
 80043f8:	4b5b      	ldr	r3, [pc, #364]	@ (8004568 <__ieee754_pow+0x400>)
 80043fa:	f7fb fead 	bl	8000158 <__aeabi_dsub>
 80043fe:	a352      	add	r3, pc, #328	@ (adr r3, 8004548 <__ieee754_pow+0x3e0>)
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	4604      	mov	r4, r0
 8004406:	460d      	mov	r5, r1
 8004408:	f7fc f85e 	bl	80004c8 <__aeabi_dmul>
 800440c:	a350      	add	r3, pc, #320	@ (adr r3, 8004550 <__ieee754_pow+0x3e8>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	4606      	mov	r6, r0
 8004414:	460f      	mov	r7, r1
 8004416:	4620      	mov	r0, r4
 8004418:	4629      	mov	r1, r5
 800441a:	f7fc f855 	bl	80004c8 <__aeabi_dmul>
 800441e:	2200      	movs	r2, #0
 8004420:	4682      	mov	sl, r0
 8004422:	468b      	mov	fp, r1
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	4b50      	ldr	r3, [pc, #320]	@ (800456c <__ieee754_pow+0x404>)
 800442a:	f7fc f84d 	bl	80004c8 <__aeabi_dmul>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	a149      	add	r1, pc, #292	@ (adr r1, 8004558 <__ieee754_pow+0x3f0>)
 8004434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004438:	f7fb fe8e 	bl	8000158 <__aeabi_dsub>
 800443c:	4622      	mov	r2, r4
 800443e:	462b      	mov	r3, r5
 8004440:	f7fc f842 	bl	80004c8 <__aeabi_dmul>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	2000      	movs	r0, #0
 800444a:	4949      	ldr	r1, [pc, #292]	@ (8004570 <__ieee754_pow+0x408>)
 800444c:	f7fb fe84 	bl	8000158 <__aeabi_dsub>
 8004450:	4622      	mov	r2, r4
 8004452:	4680      	mov	r8, r0
 8004454:	4689      	mov	r9, r1
 8004456:	462b      	mov	r3, r5
 8004458:	4620      	mov	r0, r4
 800445a:	4629      	mov	r1, r5
 800445c:	f7fc f834 	bl	80004c8 <__aeabi_dmul>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4640      	mov	r0, r8
 8004466:	4649      	mov	r1, r9
 8004468:	f7fc f82e 	bl	80004c8 <__aeabi_dmul>
 800446c:	a33c      	add	r3, pc, #240	@ (adr r3, 8004560 <__ieee754_pow+0x3f8>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f7fc f829 	bl	80004c8 <__aeabi_dmul>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4650      	mov	r0, sl
 800447c:	4659      	mov	r1, fp
 800447e:	f7fb fe6b 	bl	8000158 <__aeabi_dsub>
 8004482:	2400      	movs	r4, #0
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4680      	mov	r8, r0
 800448a:	4689      	mov	r9, r1
 800448c:	4630      	mov	r0, r6
 800448e:	4639      	mov	r1, r7
 8004490:	f7fb fe64 	bl	800015c <__adddf3>
 8004494:	4632      	mov	r2, r6
 8004496:	463b      	mov	r3, r7
 8004498:	4620      	mov	r0, r4
 800449a:	460d      	mov	r5, r1
 800449c:	f7fb fe5c 	bl	8000158 <__aeabi_dsub>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4640      	mov	r0, r8
 80044a6:	4649      	mov	r1, r9
 80044a8:	f7fb fe56 	bl	8000158 <__aeabi_dsub>
 80044ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044b4:	2300      	movs	r3, #0
 80044b6:	9304      	str	r3, [sp, #16]
 80044b8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80044bc:	4606      	mov	r6, r0
 80044be:	460f      	mov	r7, r1
 80044c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044c4:	4652      	mov	r2, sl
 80044c6:	465b      	mov	r3, fp
 80044c8:	f7fb fe46 	bl	8000158 <__aeabi_dsub>
 80044cc:	4622      	mov	r2, r4
 80044ce:	462b      	mov	r3, r5
 80044d0:	f7fb fffa 	bl	80004c8 <__aeabi_dmul>
 80044d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044d8:	4680      	mov	r8, r0
 80044da:	4689      	mov	r9, r1
 80044dc:	4630      	mov	r0, r6
 80044de:	4639      	mov	r1, r7
 80044e0:	f7fb fff2 	bl	80004c8 <__aeabi_dmul>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4640      	mov	r0, r8
 80044ea:	4649      	mov	r1, r9
 80044ec:	f7fb fe36 	bl	800015c <__adddf3>
 80044f0:	4652      	mov	r2, sl
 80044f2:	465b      	mov	r3, fp
 80044f4:	4606      	mov	r6, r0
 80044f6:	460f      	mov	r7, r1
 80044f8:	4620      	mov	r0, r4
 80044fa:	4629      	mov	r1, r5
 80044fc:	f7fb ffe4 	bl	80004c8 <__aeabi_dmul>
 8004500:	460b      	mov	r3, r1
 8004502:	4602      	mov	r2, r0
 8004504:	4680      	mov	r8, r0
 8004506:	4689      	mov	r9, r1
 8004508:	4630      	mov	r0, r6
 800450a:	4639      	mov	r1, r7
 800450c:	f7fb fe26 	bl	800015c <__adddf3>
 8004510:	4b18      	ldr	r3, [pc, #96]	@ (8004574 <__ieee754_pow+0x40c>)
 8004512:	4604      	mov	r4, r0
 8004514:	4299      	cmp	r1, r3
 8004516:	460d      	mov	r5, r1
 8004518:	468a      	mov	sl, r1
 800451a:	468b      	mov	fp, r1
 800451c:	f340 82e0 	ble.w	8004ae0 <__ieee754_pow+0x978>
 8004520:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004524:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004528:	4303      	orrs	r3, r0
 800452a:	f000 81df 	beq.w	80048ec <__ieee754_pow+0x784>
 800452e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004532:	2200      	movs	r2, #0
 8004534:	2300      	movs	r3, #0
 8004536:	f7fc fa39 	bl	80009ac <__aeabi_dcmplt>
 800453a:	3800      	subs	r0, #0
 800453c:	bf18      	it	ne
 800453e:	2001      	movne	r0, #1
 8004540:	e71d      	b.n	800437e <__ieee754_pow+0x216>
 8004542:	bf00      	nop
 8004544:	f3af 8000 	nop.w
 8004548:	60000000 	.word	0x60000000
 800454c:	3ff71547 	.word	0x3ff71547
 8004550:	f85ddf44 	.word	0xf85ddf44
 8004554:	3e54ae0b 	.word	0x3e54ae0b
 8004558:	55555555 	.word	0x55555555
 800455c:	3fd55555 	.word	0x3fd55555
 8004560:	652b82fe 	.word	0x652b82fe
 8004564:	3ff71547 	.word	0x3ff71547
 8004568:	3ff00000 	.word	0x3ff00000
 800456c:	3fd00000 	.word	0x3fd00000
 8004570:	3fe00000 	.word	0x3fe00000
 8004574:	408fffff 	.word	0x408fffff
 8004578:	4ad3      	ldr	r2, [pc, #844]	@ (80048c8 <__ieee754_pow+0x760>)
 800457a:	402a      	ands	r2, r5
 800457c:	2a00      	cmp	r2, #0
 800457e:	f040 817a 	bne.w	8004876 <__ieee754_pow+0x70e>
 8004582:	4bd2      	ldr	r3, [pc, #840]	@ (80048cc <__ieee754_pow+0x764>)
 8004584:	2200      	movs	r2, #0
 8004586:	f7fb ff9f 	bl	80004c8 <__aeabi_dmul>
 800458a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800458e:	460b      	mov	r3, r1
 8004590:	151a      	asrs	r2, r3, #20
 8004592:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004596:	4422      	add	r2, r4
 8004598:	920a      	str	r2, [sp, #40]	@ 0x28
 800459a:	4acd      	ldr	r2, [pc, #820]	@ (80048d0 <__ieee754_pow+0x768>)
 800459c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80045a4:	4293      	cmp	r3, r2
 80045a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80045aa:	dd08      	ble.n	80045be <__ieee754_pow+0x456>
 80045ac:	4ac9      	ldr	r2, [pc, #804]	@ (80048d4 <__ieee754_pow+0x76c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	f340 8163 	ble.w	800487a <__ieee754_pow+0x712>
 80045b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045b6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80045ba:	3301      	adds	r3, #1
 80045bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80045be:	2600      	movs	r6, #0
 80045c0:	00f3      	lsls	r3, r6, #3
 80045c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045c4:	4bc4      	ldr	r3, [pc, #784]	@ (80048d8 <__ieee754_pow+0x770>)
 80045c6:	4629      	mov	r1, r5
 80045c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80045cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045d0:	461a      	mov	r2, r3
 80045d2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80045d6:	4623      	mov	r3, r4
 80045d8:	4682      	mov	sl, r0
 80045da:	f7fb fdbd 	bl	8000158 <__aeabi_dsub>
 80045de:	4652      	mov	r2, sl
 80045e0:	462b      	mov	r3, r5
 80045e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80045e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80045ea:	f7fb fdb7 	bl	800015c <__adddf3>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	2000      	movs	r0, #0
 80045f4:	49b9      	ldr	r1, [pc, #740]	@ (80048dc <__ieee754_pow+0x774>)
 80045f6:	f7fc f891 	bl	800071c <__aeabi_ddiv>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004606:	f7fb ff5f 	bl	80004c8 <__aeabi_dmul>
 800460a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800460e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004612:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004616:	2300      	movs	r3, #0
 8004618:	2200      	movs	r2, #0
 800461a:	46ab      	mov	fp, r5
 800461c:	106d      	asrs	r5, r5, #1
 800461e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004622:	9304      	str	r3, [sp, #16]
 8004624:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004628:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800462c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004630:	4640      	mov	r0, r8
 8004632:	4649      	mov	r1, r9
 8004634:	4614      	mov	r4, r2
 8004636:	461d      	mov	r5, r3
 8004638:	f7fb ff46 	bl	80004c8 <__aeabi_dmul>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004644:	f7fb fd88 	bl	8000158 <__aeabi_dsub>
 8004648:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800464c:	4606      	mov	r6, r0
 800464e:	460f      	mov	r7, r1
 8004650:	4620      	mov	r0, r4
 8004652:	4629      	mov	r1, r5
 8004654:	f7fb fd80 	bl	8000158 <__aeabi_dsub>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4650      	mov	r0, sl
 800465e:	4659      	mov	r1, fp
 8004660:	f7fb fd7a 	bl	8000158 <__aeabi_dsub>
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	f7fb ff2e 	bl	80004c8 <__aeabi_dmul>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4630      	mov	r0, r6
 8004672:	4639      	mov	r1, r7
 8004674:	f7fb fd70 	bl	8000158 <__aeabi_dsub>
 8004678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800467c:	f7fb ff24 	bl	80004c8 <__aeabi_dmul>
 8004680:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004684:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	f7fb ff1c 	bl	80004c8 <__aeabi_dmul>
 8004690:	a37b      	add	r3, pc, #492	@ (adr r3, 8004880 <__ieee754_pow+0x718>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	4604      	mov	r4, r0
 8004698:	460d      	mov	r5, r1
 800469a:	f7fb ff15 	bl	80004c8 <__aeabi_dmul>
 800469e:	a37a      	add	r3, pc, #488	@ (adr r3, 8004888 <__ieee754_pow+0x720>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f7fb fd5a 	bl	800015c <__adddf3>
 80046a8:	4622      	mov	r2, r4
 80046aa:	462b      	mov	r3, r5
 80046ac:	f7fb ff0c 	bl	80004c8 <__aeabi_dmul>
 80046b0:	a377      	add	r3, pc, #476	@ (adr r3, 8004890 <__ieee754_pow+0x728>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f7fb fd51 	bl	800015c <__adddf3>
 80046ba:	4622      	mov	r2, r4
 80046bc:	462b      	mov	r3, r5
 80046be:	f7fb ff03 	bl	80004c8 <__aeabi_dmul>
 80046c2:	a375      	add	r3, pc, #468	@ (adr r3, 8004898 <__ieee754_pow+0x730>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f7fb fd48 	bl	800015c <__adddf3>
 80046cc:	4622      	mov	r2, r4
 80046ce:	462b      	mov	r3, r5
 80046d0:	f7fb fefa 	bl	80004c8 <__aeabi_dmul>
 80046d4:	a372      	add	r3, pc, #456	@ (adr r3, 80048a0 <__ieee754_pow+0x738>)
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f7fb fd3f 	bl	800015c <__adddf3>
 80046de:	4622      	mov	r2, r4
 80046e0:	462b      	mov	r3, r5
 80046e2:	f7fb fef1 	bl	80004c8 <__aeabi_dmul>
 80046e6:	a370      	add	r3, pc, #448	@ (adr r3, 80048a8 <__ieee754_pow+0x740>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb fd36 	bl	800015c <__adddf3>
 80046f0:	4622      	mov	r2, r4
 80046f2:	4606      	mov	r6, r0
 80046f4:	460f      	mov	r7, r1
 80046f6:	462b      	mov	r3, r5
 80046f8:	4620      	mov	r0, r4
 80046fa:	4629      	mov	r1, r5
 80046fc:	f7fb fee4 	bl	80004c8 <__aeabi_dmul>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4630      	mov	r0, r6
 8004706:	4639      	mov	r1, r7
 8004708:	f7fb fede 	bl	80004c8 <__aeabi_dmul>
 800470c:	4604      	mov	r4, r0
 800470e:	460d      	mov	r5, r1
 8004710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	f7fb fd20 	bl	800015c <__adddf3>
 800471c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004720:	f7fb fed2 	bl	80004c8 <__aeabi_dmul>
 8004724:	4622      	mov	r2, r4
 8004726:	462b      	mov	r3, r5
 8004728:	f7fb fd18 	bl	800015c <__adddf3>
 800472c:	4642      	mov	r2, r8
 800472e:	4682      	mov	sl, r0
 8004730:	468b      	mov	fp, r1
 8004732:	464b      	mov	r3, r9
 8004734:	4640      	mov	r0, r8
 8004736:	4649      	mov	r1, r9
 8004738:	f7fb fec6 	bl	80004c8 <__aeabi_dmul>
 800473c:	2200      	movs	r2, #0
 800473e:	4b68      	ldr	r3, [pc, #416]	@ (80048e0 <__ieee754_pow+0x778>)
 8004740:	4606      	mov	r6, r0
 8004742:	460f      	mov	r7, r1
 8004744:	f7fb fd0a 	bl	800015c <__adddf3>
 8004748:	4652      	mov	r2, sl
 800474a:	465b      	mov	r3, fp
 800474c:	f7fb fd06 	bl	800015c <__adddf3>
 8004750:	2400      	movs	r4, #0
 8004752:	460d      	mov	r5, r1
 8004754:	4622      	mov	r2, r4
 8004756:	460b      	mov	r3, r1
 8004758:	4640      	mov	r0, r8
 800475a:	4649      	mov	r1, r9
 800475c:	f7fb feb4 	bl	80004c8 <__aeabi_dmul>
 8004760:	2200      	movs	r2, #0
 8004762:	4680      	mov	r8, r0
 8004764:	4689      	mov	r9, r1
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	4b5d      	ldr	r3, [pc, #372]	@ (80048e0 <__ieee754_pow+0x778>)
 800476c:	f7fb fcf4 	bl	8000158 <__aeabi_dsub>
 8004770:	4632      	mov	r2, r6
 8004772:	463b      	mov	r3, r7
 8004774:	f7fb fcf0 	bl	8000158 <__aeabi_dsub>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4650      	mov	r0, sl
 800477e:	4659      	mov	r1, fp
 8004780:	f7fb fcea 	bl	8000158 <__aeabi_dsub>
 8004784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004788:	f7fb fe9e 	bl	80004c8 <__aeabi_dmul>
 800478c:	4622      	mov	r2, r4
 800478e:	4606      	mov	r6, r0
 8004790:	460f      	mov	r7, r1
 8004792:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004796:	462b      	mov	r3, r5
 8004798:	f7fb fe96 	bl	80004c8 <__aeabi_dmul>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4630      	mov	r0, r6
 80047a2:	4639      	mov	r1, r7
 80047a4:	f7fb fcda 	bl	800015c <__adddf3>
 80047a8:	2400      	movs	r4, #0
 80047aa:	4606      	mov	r6, r0
 80047ac:	460f      	mov	r7, r1
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4640      	mov	r0, r8
 80047b4:	4649      	mov	r1, r9
 80047b6:	f7fb fcd1 	bl	800015c <__adddf3>
 80047ba:	a33d      	add	r3, pc, #244	@ (adr r3, 80048b0 <__ieee754_pow+0x748>)
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	4620      	mov	r0, r4
 80047c2:	460d      	mov	r5, r1
 80047c4:	f7fb fe80 	bl	80004c8 <__aeabi_dmul>
 80047c8:	4642      	mov	r2, r8
 80047ca:	464b      	mov	r3, r9
 80047cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80047d0:	4620      	mov	r0, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	f7fb fcc0 	bl	8000158 <__aeabi_dsub>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4630      	mov	r0, r6
 80047de:	4639      	mov	r1, r7
 80047e0:	f7fb fcba 	bl	8000158 <__aeabi_dsub>
 80047e4:	a334      	add	r3, pc, #208	@ (adr r3, 80048b8 <__ieee754_pow+0x750>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f7fb fe6d 	bl	80004c8 <__aeabi_dmul>
 80047ee:	a334      	add	r3, pc, #208	@ (adr r3, 80048c0 <__ieee754_pow+0x758>)
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	4606      	mov	r6, r0
 80047f6:	460f      	mov	r7, r1
 80047f8:	4620      	mov	r0, r4
 80047fa:	4629      	mov	r1, r5
 80047fc:	f7fb fe64 	bl	80004c8 <__aeabi_dmul>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4630      	mov	r0, r6
 8004806:	4639      	mov	r1, r7
 8004808:	f7fb fca8 	bl	800015c <__adddf3>
 800480c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800480e:	4b35      	ldr	r3, [pc, #212]	@ (80048e4 <__ieee754_pow+0x77c>)
 8004810:	2400      	movs	r4, #0
 8004812:	4413      	add	r3, r2
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f7fb fca0 	bl	800015c <__adddf3>
 800481c:	4682      	mov	sl, r0
 800481e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004820:	468b      	mov	fp, r1
 8004822:	f7fb fde7 	bl	80003f4 <__aeabi_i2d>
 8004826:	4606      	mov	r6, r0
 8004828:	460f      	mov	r7, r1
 800482a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800482c:	4b2e      	ldr	r3, [pc, #184]	@ (80048e8 <__ieee754_pow+0x780>)
 800482e:	4413      	add	r3, r2
 8004830:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004834:	4652      	mov	r2, sl
 8004836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800483a:	465b      	mov	r3, fp
 800483c:	f7fb fc8e 	bl	800015c <__adddf3>
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	f7fb fc8a 	bl	800015c <__adddf3>
 8004848:	4632      	mov	r2, r6
 800484a:	463b      	mov	r3, r7
 800484c:	f7fb fc86 	bl	800015c <__adddf3>
 8004850:	4632      	mov	r2, r6
 8004852:	463b      	mov	r3, r7
 8004854:	4620      	mov	r0, r4
 8004856:	460d      	mov	r5, r1
 8004858:	f7fb fc7e 	bl	8000158 <__aeabi_dsub>
 800485c:	4642      	mov	r2, r8
 800485e:	464b      	mov	r3, r9
 8004860:	f7fb fc7a 	bl	8000158 <__aeabi_dsub>
 8004864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004868:	f7fb fc76 	bl	8000158 <__aeabi_dsub>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4650      	mov	r0, sl
 8004872:	4659      	mov	r1, fp
 8004874:	e618      	b.n	80044a8 <__ieee754_pow+0x340>
 8004876:	2400      	movs	r4, #0
 8004878:	e68a      	b.n	8004590 <__ieee754_pow+0x428>
 800487a:	2601      	movs	r6, #1
 800487c:	e6a0      	b.n	80045c0 <__ieee754_pow+0x458>
 800487e:	bf00      	nop
 8004880:	4a454eef 	.word	0x4a454eef
 8004884:	3fca7e28 	.word	0x3fca7e28
 8004888:	93c9db65 	.word	0x93c9db65
 800488c:	3fcd864a 	.word	0x3fcd864a
 8004890:	a91d4101 	.word	0xa91d4101
 8004894:	3fd17460 	.word	0x3fd17460
 8004898:	518f264d 	.word	0x518f264d
 800489c:	3fd55555 	.word	0x3fd55555
 80048a0:	db6fabff 	.word	0xdb6fabff
 80048a4:	3fdb6db6 	.word	0x3fdb6db6
 80048a8:	33333303 	.word	0x33333303
 80048ac:	3fe33333 	.word	0x3fe33333
 80048b0:	e0000000 	.word	0xe0000000
 80048b4:	3feec709 	.word	0x3feec709
 80048b8:	dc3a03fd 	.word	0xdc3a03fd
 80048bc:	3feec709 	.word	0x3feec709
 80048c0:	145b01f5 	.word	0x145b01f5
 80048c4:	be3e2fe0 	.word	0xbe3e2fe0
 80048c8:	7ff00000 	.word	0x7ff00000
 80048cc:	43400000 	.word	0x43400000
 80048d0:	0003988e 	.word	0x0003988e
 80048d4:	000bb679 	.word	0x000bb679
 80048d8:	080052d0 	.word	0x080052d0
 80048dc:	3ff00000 	.word	0x3ff00000
 80048e0:	40080000 	.word	0x40080000
 80048e4:	080052b0 	.word	0x080052b0
 80048e8:	080052c0 	.word	0x080052c0
 80048ec:	a39a      	add	r3, pc, #616	@ (adr r3, 8004b58 <__ieee754_pow+0x9f0>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	f7fb fc31 	bl	800015c <__adddf3>
 80048fa:	4642      	mov	r2, r8
 80048fc:	e9cd 0100 	strd	r0, r1, [sp]
 8004900:	464b      	mov	r3, r9
 8004902:	4620      	mov	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	f7fb fc27 	bl	8000158 <__aeabi_dsub>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004912:	f7fc f869 	bl	80009e8 <__aeabi_dcmpgt>
 8004916:	2800      	cmp	r0, #0
 8004918:	f47f ae09 	bne.w	800452e <__ieee754_pow+0x3c6>
 800491c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004920:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8004924:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8004928:	fa43 fa0a 	asr.w	sl, r3, sl
 800492c:	44da      	add	sl, fp
 800492e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004932:	489b      	ldr	r0, [pc, #620]	@ (8004ba0 <__ieee754_pow+0xa38>)
 8004934:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004938:	4108      	asrs	r0, r1
 800493a:	ea00 030a 	and.w	r3, r0, sl
 800493e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004942:	f1c1 0114 	rsb	r1, r1, #20
 8004946:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800494a:	4640      	mov	r0, r8
 800494c:	fa4a fa01 	asr.w	sl, sl, r1
 8004950:	f1bb 0f00 	cmp.w	fp, #0
 8004954:	4649      	mov	r1, r9
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	bfb8      	it	lt
 800495c:	f1ca 0a00 	rsblt	sl, sl, #0
 8004960:	f7fb fbfa 	bl	8000158 <__aeabi_dsub>
 8004964:	4680      	mov	r8, r0
 8004966:	4689      	mov	r9, r1
 8004968:	2400      	movs	r4, #0
 800496a:	4632      	mov	r2, r6
 800496c:	463b      	mov	r3, r7
 800496e:	4640      	mov	r0, r8
 8004970:	4649      	mov	r1, r9
 8004972:	f7fb fbf3 	bl	800015c <__adddf3>
 8004976:	a37a      	add	r3, pc, #488	@ (adr r3, 8004b60 <__ieee754_pow+0x9f8>)
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	4620      	mov	r0, r4
 800497e:	460d      	mov	r5, r1
 8004980:	f7fb fda2 	bl	80004c8 <__aeabi_dmul>
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	e9cd 0100 	strd	r0, r1, [sp]
 800498c:	4620      	mov	r0, r4
 800498e:	4629      	mov	r1, r5
 8004990:	f7fb fbe2 	bl	8000158 <__aeabi_dsub>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4630      	mov	r0, r6
 800499a:	4639      	mov	r1, r7
 800499c:	f7fb fbdc 	bl	8000158 <__aeabi_dsub>
 80049a0:	a371      	add	r3, pc, #452	@ (adr r3, 8004b68 <__ieee754_pow+0xa00>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fb fd8f 	bl	80004c8 <__aeabi_dmul>
 80049aa:	a371      	add	r3, pc, #452	@ (adr r3, 8004b70 <__ieee754_pow+0xa08>)
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	4680      	mov	r8, r0
 80049b2:	4689      	mov	r9, r1
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fb fd86 	bl	80004c8 <__aeabi_dmul>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4640      	mov	r0, r8
 80049c2:	4649      	mov	r1, r9
 80049c4:	f7fb fbca 	bl	800015c <__adddf3>
 80049c8:	4604      	mov	r4, r0
 80049ca:	460d      	mov	r5, r1
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049d4:	f7fb fbc2 	bl	800015c <__adddf3>
 80049d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049dc:	4680      	mov	r8, r0
 80049de:	4689      	mov	r9, r1
 80049e0:	f7fb fbba 	bl	8000158 <__aeabi_dsub>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4620      	mov	r0, r4
 80049ea:	4629      	mov	r1, r5
 80049ec:	f7fb fbb4 	bl	8000158 <__aeabi_dsub>
 80049f0:	4642      	mov	r2, r8
 80049f2:	4606      	mov	r6, r0
 80049f4:	460f      	mov	r7, r1
 80049f6:	464b      	mov	r3, r9
 80049f8:	4640      	mov	r0, r8
 80049fa:	4649      	mov	r1, r9
 80049fc:	f7fb fd64 	bl	80004c8 <__aeabi_dmul>
 8004a00:	a35d      	add	r3, pc, #372	@ (adr r3, 8004b78 <__ieee754_pow+0xa10>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	4604      	mov	r4, r0
 8004a08:	460d      	mov	r5, r1
 8004a0a:	f7fb fd5d 	bl	80004c8 <__aeabi_dmul>
 8004a0e:	a35c      	add	r3, pc, #368	@ (adr r3, 8004b80 <__ieee754_pow+0xa18>)
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f7fb fba0 	bl	8000158 <__aeabi_dsub>
 8004a18:	4622      	mov	r2, r4
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	f7fb fd54 	bl	80004c8 <__aeabi_dmul>
 8004a20:	a359      	add	r3, pc, #356	@ (adr r3, 8004b88 <__ieee754_pow+0xa20>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f7fb fb99 	bl	800015c <__adddf3>
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	462b      	mov	r3, r5
 8004a2e:	f7fb fd4b 	bl	80004c8 <__aeabi_dmul>
 8004a32:	a357      	add	r3, pc, #348	@ (adr r3, 8004b90 <__ieee754_pow+0xa28>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f7fb fb8e 	bl	8000158 <__aeabi_dsub>
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	462b      	mov	r3, r5
 8004a40:	f7fb fd42 	bl	80004c8 <__aeabi_dmul>
 8004a44:	a354      	add	r3, pc, #336	@ (adr r3, 8004b98 <__ieee754_pow+0xa30>)
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f7fb fb87 	bl	800015c <__adddf3>
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	f7fb fd39 	bl	80004c8 <__aeabi_dmul>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	f7fb fb7b 	bl	8000158 <__aeabi_dsub>
 8004a62:	4604      	mov	r4, r0
 8004a64:	460d      	mov	r5, r1
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	f7fb fd2b 	bl	80004c8 <__aeabi_dmul>
 8004a72:	2200      	movs	r2, #0
 8004a74:	e9cd 0100 	strd	r0, r1, [sp]
 8004a78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	4629      	mov	r1, r5
 8004a80:	f7fb fb6a 	bl	8000158 <__aeabi_dsub>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a8c:	f7fb fe46 	bl	800071c <__aeabi_ddiv>
 8004a90:	4632      	mov	r2, r6
 8004a92:	4604      	mov	r4, r0
 8004a94:	460d      	mov	r5, r1
 8004a96:	463b      	mov	r3, r7
 8004a98:	4640      	mov	r0, r8
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	f7fb fd14 	bl	80004c8 <__aeabi_dmul>
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	f7fb fb5a 	bl	800015c <__adddf3>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4620      	mov	r0, r4
 8004aae:	4629      	mov	r1, r5
 8004ab0:	f7fb fb52 	bl	8000158 <__aeabi_dsub>
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	f7fb fb4e 	bl	8000158 <__aeabi_dsub>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	4938      	ldr	r1, [pc, #224]	@ (8004ba4 <__ieee754_pow+0xa3c>)
 8004ac4:	f7fb fb48 	bl	8000158 <__aeabi_dsub>
 8004ac8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004acc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8004ad0:	da2e      	bge.n	8004b30 <__ieee754_pow+0x9c8>
 8004ad2:	4652      	mov	r2, sl
 8004ad4:	f000 f874 	bl	8004bc0 <scalbn>
 8004ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004adc:	f7ff bbed 	b.w	80042ba <__ieee754_pow+0x152>
 8004ae0:	4c31      	ldr	r4, [pc, #196]	@ (8004ba8 <__ieee754_pow+0xa40>)
 8004ae2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	d91a      	bls.n	8004b20 <__ieee754_pow+0x9b8>
 8004aea:	4b30      	ldr	r3, [pc, #192]	@ (8004bac <__ieee754_pow+0xa44>)
 8004aec:	440b      	add	r3, r1
 8004aee:	4303      	orrs	r3, r0
 8004af0:	d009      	beq.n	8004b06 <__ieee754_pow+0x99e>
 8004af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	2300      	movs	r3, #0
 8004afa:	f7fb ff57 	bl	80009ac <__aeabi_dcmplt>
 8004afe:	3800      	subs	r0, #0
 8004b00:	bf18      	it	ne
 8004b02:	2001      	movne	r0, #1
 8004b04:	e444      	b.n	8004390 <__ieee754_pow+0x228>
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	f7fb fb25 	bl	8000158 <__aeabi_dsub>
 8004b0e:	4632      	mov	r2, r6
 8004b10:	463b      	mov	r3, r7
 8004b12:	f7fb ff5f 	bl	80009d4 <__aeabi_dcmpge>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d1eb      	bne.n	8004af2 <__ieee754_pow+0x98a>
 8004b1a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8004bb0 <__ieee754_pow+0xa48>
 8004b1e:	e6fd      	b.n	800491c <__ieee754_pow+0x7b4>
 8004b20:	469a      	mov	sl, r3
 8004b22:	4b24      	ldr	r3, [pc, #144]	@ (8004bb4 <__ieee754_pow+0xa4c>)
 8004b24:	459a      	cmp	sl, r3
 8004b26:	f63f aef9 	bhi.w	800491c <__ieee754_pow+0x7b4>
 8004b2a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004b2e:	e71b      	b.n	8004968 <__ieee754_pow+0x800>
 8004b30:	4621      	mov	r1, r4
 8004b32:	e7d1      	b.n	8004ad8 <__ieee754_pow+0x970>
 8004b34:	2000      	movs	r0, #0
 8004b36:	491b      	ldr	r1, [pc, #108]	@ (8004ba4 <__ieee754_pow+0xa3c>)
 8004b38:	f7ff bb34 	b.w	80041a4 <__ieee754_pow+0x3c>
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	2100      	movs	r1, #0
 8004b40:	f7ff bb30 	b.w	80041a4 <__ieee754_pow+0x3c>
 8004b44:	4650      	mov	r0, sl
 8004b46:	4659      	mov	r1, fp
 8004b48:	f7ff bb2c 	b.w	80041a4 <__ieee754_pow+0x3c>
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	f7ff bb79 	b.w	8004244 <__ieee754_pow+0xdc>
 8004b52:	2400      	movs	r4, #0
 8004b54:	f7ff bb64 	b.w	8004220 <__ieee754_pow+0xb8>
 8004b58:	652b82fe 	.word	0x652b82fe
 8004b5c:	3c971547 	.word	0x3c971547
 8004b60:	00000000 	.word	0x00000000
 8004b64:	3fe62e43 	.word	0x3fe62e43
 8004b68:	fefa39ef 	.word	0xfefa39ef
 8004b6c:	3fe62e42 	.word	0x3fe62e42
 8004b70:	0ca86c39 	.word	0x0ca86c39
 8004b74:	be205c61 	.word	0xbe205c61
 8004b78:	72bea4d0 	.word	0x72bea4d0
 8004b7c:	3e663769 	.word	0x3e663769
 8004b80:	c5d26bf1 	.word	0xc5d26bf1
 8004b84:	3ebbbd41 	.word	0x3ebbbd41
 8004b88:	af25de2c 	.word	0xaf25de2c
 8004b8c:	3f11566a 	.word	0x3f11566a
 8004b90:	16bebd93 	.word	0x16bebd93
 8004b94:	3f66c16c 	.word	0x3f66c16c
 8004b98:	5555553e 	.word	0x5555553e
 8004b9c:	3fc55555 	.word	0x3fc55555
 8004ba0:	fff00000 	.word	0xfff00000
 8004ba4:	3ff00000 	.word	0x3ff00000
 8004ba8:	4090cbff 	.word	0x4090cbff
 8004bac:	3f6f3400 	.word	0x3f6f3400
 8004bb0:	4090cc00 	.word	0x4090cc00
 8004bb4:	3fe00000 	.word	0x3fe00000

08004bb8 <fabs>:
 8004bb8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4770      	bx	lr

08004bc0 <scalbn>:
 8004bc0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004bc4:	4616      	mov	r6, r2
 8004bc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004bca:	4683      	mov	fp, r0
 8004bcc:	468c      	mov	ip, r1
 8004bce:	460b      	mov	r3, r1
 8004bd0:	b982      	cbnz	r2, 8004bf4 <scalbn+0x34>
 8004bd2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004bd6:	4303      	orrs	r3, r0
 8004bd8:	d039      	beq.n	8004c4e <scalbn+0x8e>
 8004bda:	4b2f      	ldr	r3, [pc, #188]	@ (8004c98 <scalbn+0xd8>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f7fb fc73 	bl	80004c8 <__aeabi_dmul>
 8004be2:	4b2e      	ldr	r3, [pc, #184]	@ (8004c9c <scalbn+0xdc>)
 8004be4:	4683      	mov	fp, r0
 8004be6:	429e      	cmp	r6, r3
 8004be8:	468c      	mov	ip, r1
 8004bea:	da0d      	bge.n	8004c08 <scalbn+0x48>
 8004bec:	a326      	add	r3, pc, #152	@ (adr r3, 8004c88 <scalbn+0xc8>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	e01b      	b.n	8004c2c <scalbn+0x6c>
 8004bf4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004bf8:	42ba      	cmp	r2, r7
 8004bfa:	d109      	bne.n	8004c10 <scalbn+0x50>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	f7fb faad 	bl	800015c <__adddf3>
 8004c02:	4683      	mov	fp, r0
 8004c04:	468c      	mov	ip, r1
 8004c06:	e022      	b.n	8004c4e <scalbn+0x8e>
 8004c08:	460b      	mov	r3, r1
 8004c0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004c0e:	3a36      	subs	r2, #54	@ 0x36
 8004c10:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004c14:	428e      	cmp	r6, r1
 8004c16:	dd0c      	ble.n	8004c32 <scalbn+0x72>
 8004c18:	a31d      	add	r3, pc, #116	@ (adr r3, 8004c90 <scalbn+0xd0>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	461c      	mov	r4, r3
 8004c20:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8004c24:	f361 74df 	bfi	r4, r1, #31, #1
 8004c28:	4621      	mov	r1, r4
 8004c2a:	481d      	ldr	r0, [pc, #116]	@ (8004ca0 <scalbn+0xe0>)
 8004c2c:	f7fb fc4c 	bl	80004c8 <__aeabi_dmul>
 8004c30:	e7e7      	b.n	8004c02 <scalbn+0x42>
 8004c32:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004c36:	4432      	add	r2, r6
 8004c38:	428a      	cmp	r2, r1
 8004c3a:	dced      	bgt.n	8004c18 <scalbn+0x58>
 8004c3c:	2a00      	cmp	r2, #0
 8004c3e:	dd0a      	ble.n	8004c56 <scalbn+0x96>
 8004c40:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004c44:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004c48:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c4c:	46ac      	mov	ip, r5
 8004c4e:	4658      	mov	r0, fp
 8004c50:	4661      	mov	r1, ip
 8004c52:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004c56:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004c5a:	da09      	bge.n	8004c70 <scalbn+0xb0>
 8004c5c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004c60:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8004c64:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004c68:	480e      	ldr	r0, [pc, #56]	@ (8004ca4 <scalbn+0xe4>)
 8004c6a:	f041 011f 	orr.w	r1, r1, #31
 8004c6e:	e7bd      	b.n	8004bec <scalbn+0x2c>
 8004c70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004c74:	3236      	adds	r2, #54	@ 0x36
 8004c76:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004c7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c7e:	4658      	mov	r0, fp
 8004c80:	4629      	mov	r1, r5
 8004c82:	2200      	movs	r2, #0
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <scalbn+0xe8>)
 8004c86:	e7d1      	b.n	8004c2c <scalbn+0x6c>
 8004c88:	c2f8f359 	.word	0xc2f8f359
 8004c8c:	01a56e1f 	.word	0x01a56e1f
 8004c90:	8800759c 	.word	0x8800759c
 8004c94:	7e37e43c 	.word	0x7e37e43c
 8004c98:	43500000 	.word	0x43500000
 8004c9c:	ffff3cb0 	.word	0xffff3cb0
 8004ca0:	8800759c 	.word	0x8800759c
 8004ca4:	c2f8f359 	.word	0xc2f8f359
 8004ca8:	3c900000 	.word	0x3c900000

08004cac <with_errno>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4604      	mov	r4, r0
 8004cb0:	460d      	mov	r5, r1
 8004cb2:	4616      	mov	r6, r2
 8004cb4:	f7ff f90a 	bl	8003ecc <__errno>
 8004cb8:	4629      	mov	r1, r5
 8004cba:	6006      	str	r6, [r0, #0]
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}

08004cc0 <xflow>:
 8004cc0:	b513      	push	{r0, r1, r4, lr}
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	b10c      	cbz	r4, 8004cce <xflow+0xe>
 8004cca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004cce:	e9cd 2300 	strd	r2, r3, [sp]
 8004cd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cd6:	f7fb fbf7 	bl	80004c8 <__aeabi_dmul>
 8004cda:	2222      	movs	r2, #34	@ 0x22
 8004cdc:	b002      	add	sp, #8
 8004cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce2:	f7ff bfe3 	b.w	8004cac <with_errno>

08004ce6 <__math_uflow>:
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004cec:	f7ff bfe8 	b.w	8004cc0 <xflow>

08004cf0 <__math_oflow>:
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004cf6:	f7ff bfe3 	b.w	8004cc0 <xflow>
	...

08004cfc <__ieee754_sqrt>:
 8004cfc:	4a67      	ldr	r2, [pc, #412]	@ (8004e9c <__ieee754_sqrt+0x1a0>)
 8004cfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d02:	438a      	bics	r2, r1
 8004d04:	4606      	mov	r6, r0
 8004d06:	460f      	mov	r7, r1
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	d10e      	bne.n	8004d2c <__ieee754_sqrt+0x30>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	f7fb fbda 	bl	80004c8 <__aeabi_dmul>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4630      	mov	r0, r6
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	f7fb fa1e 	bl	800015c <__adddf3>
 8004d20:	4606      	mov	r6, r0
 8004d22:	460f      	mov	r7, r1
 8004d24:	4630      	mov	r0, r6
 8004d26:	4639      	mov	r1, r7
 8004d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	dc0c      	bgt.n	8004d4a <__ieee754_sqrt+0x4e>
 8004d30:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8004d34:	4302      	orrs	r2, r0
 8004d36:	d0f5      	beq.n	8004d24 <__ieee754_sqrt+0x28>
 8004d38:	b189      	cbz	r1, 8004d5e <__ieee754_sqrt+0x62>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	f7fb fa0c 	bl	8000158 <__aeabi_dsub>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	f7fb fcea 	bl	800071c <__aeabi_ddiv>
 8004d48:	e7ea      	b.n	8004d20 <__ieee754_sqrt+0x24>
 8004d4a:	150a      	asrs	r2, r1, #20
 8004d4c:	d115      	bne.n	8004d7a <__ieee754_sqrt+0x7e>
 8004d4e:	2100      	movs	r1, #0
 8004d50:	e009      	b.n	8004d66 <__ieee754_sqrt+0x6a>
 8004d52:	0ae3      	lsrs	r3, r4, #11
 8004d54:	3a15      	subs	r2, #21
 8004d56:	0564      	lsls	r4, r4, #21
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0fa      	beq.n	8004d52 <__ieee754_sqrt+0x56>
 8004d5c:	e7f7      	b.n	8004d4e <__ieee754_sqrt+0x52>
 8004d5e:	460a      	mov	r2, r1
 8004d60:	e7fa      	b.n	8004d58 <__ieee754_sqrt+0x5c>
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	3101      	adds	r1, #1
 8004d66:	02d8      	lsls	r0, r3, #11
 8004d68:	d5fb      	bpl.n	8004d62 <__ieee754_sqrt+0x66>
 8004d6a:	1e48      	subs	r0, r1, #1
 8004d6c:	1a12      	subs	r2, r2, r0
 8004d6e:	f1c1 0020 	rsb	r0, r1, #32
 8004d72:	fa24 f000 	lsr.w	r0, r4, r0
 8004d76:	4303      	orrs	r3, r0
 8004d78:	408c      	lsls	r4, r1
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8004d80:	2116      	movs	r1, #22
 8004d82:	07d2      	lsls	r2, r2, #31
 8004d84:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004d88:	4632      	mov	r2, r6
 8004d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d92:	bf5c      	itt	pl
 8004d94:	005b      	lslpl	r3, r3, #1
 8004d96:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004d9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d9e:	bf58      	it	pl
 8004da0:	0064      	lslpl	r4, r4, #1
 8004da2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004da6:	107f      	asrs	r7, r7, #1
 8004da8:	0064      	lsls	r4, r4, #1
 8004daa:	1815      	adds	r5, r2, r0
 8004dac:	429d      	cmp	r5, r3
 8004dae:	bfde      	ittt	le
 8004db0:	182a      	addle	r2, r5, r0
 8004db2:	1b5b      	suble	r3, r3, r5
 8004db4:	1836      	addle	r6, r6, r0
 8004db6:	0fe5      	lsrs	r5, r4, #31
 8004db8:	3901      	subs	r1, #1
 8004dba:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8004dbe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004dc2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004dc6:	d1f0      	bne.n	8004daa <__ieee754_sqrt+0xae>
 8004dc8:	460d      	mov	r5, r1
 8004dca:	f04f 0a20 	mov.w	sl, #32
 8004dce:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	eb01 0c00 	add.w	ip, r1, r0
 8004dd8:	db02      	blt.n	8004de0 <__ieee754_sqrt+0xe4>
 8004dda:	d113      	bne.n	8004e04 <__ieee754_sqrt+0x108>
 8004ddc:	45a4      	cmp	ip, r4
 8004dde:	d811      	bhi.n	8004e04 <__ieee754_sqrt+0x108>
 8004de0:	f1bc 0f00 	cmp.w	ip, #0
 8004de4:	eb0c 0100 	add.w	r1, ip, r0
 8004de8:	da42      	bge.n	8004e70 <__ieee754_sqrt+0x174>
 8004dea:	2900      	cmp	r1, #0
 8004dec:	db40      	blt.n	8004e70 <__ieee754_sqrt+0x174>
 8004dee:	f102 0e01 	add.w	lr, r2, #1
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	4672      	mov	r2, lr
 8004df6:	45a4      	cmp	ip, r4
 8004df8:	bf88      	it	hi
 8004dfa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004dfe:	eba4 040c 	sub.w	r4, r4, ip
 8004e02:	4405      	add	r5, r0
 8004e04:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8004e08:	f1ba 0a01 	subs.w	sl, sl, #1
 8004e0c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8004e10:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004e14:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004e18:	d1db      	bne.n	8004dd2 <__ieee754_sqrt+0xd6>
 8004e1a:	431c      	orrs	r4, r3
 8004e1c:	d01a      	beq.n	8004e54 <__ieee754_sqrt+0x158>
 8004e1e:	4c20      	ldr	r4, [pc, #128]	@ (8004ea0 <__ieee754_sqrt+0x1a4>)
 8004e20:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8004ea4 <__ieee754_sqrt+0x1a8>
 8004e24:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004e28:	e9db 2300 	ldrd	r2, r3, [fp]
 8004e2c:	f7fb f994 	bl	8000158 <__aeabi_dsub>
 8004e30:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4640      	mov	r0, r8
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	f7fb fdc0 	bl	80009c0 <__aeabi_dcmple>
 8004e40:	b140      	cbz	r0, 8004e54 <__ieee754_sqrt+0x158>
 8004e42:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004e46:	e9db 2300 	ldrd	r2, r3, [fp]
 8004e4a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004e4e:	d111      	bne.n	8004e74 <__ieee754_sqrt+0x178>
 8004e50:	4655      	mov	r5, sl
 8004e52:	3601      	adds	r6, #1
 8004e54:	1072      	asrs	r2, r6, #1
 8004e56:	086b      	lsrs	r3, r5, #1
 8004e58:	07f1      	lsls	r1, r6, #31
 8004e5a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004e5e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004e62:	bf48      	it	mi
 8004e64:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004e68:	4618      	mov	r0, r3
 8004e6a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8004e6e:	e757      	b.n	8004d20 <__ieee754_sqrt+0x24>
 8004e70:	4696      	mov	lr, r2
 8004e72:	e7be      	b.n	8004df2 <__ieee754_sqrt+0xf6>
 8004e74:	f7fb f972 	bl	800015c <__adddf3>
 8004e78:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4640      	mov	r0, r8
 8004e82:	4649      	mov	r1, r9
 8004e84:	f7fb fd92 	bl	80009ac <__aeabi_dcmplt>
 8004e88:	b120      	cbz	r0, 8004e94 <__ieee754_sqrt+0x198>
 8004e8a:	1ca8      	adds	r0, r5, #2
 8004e8c:	bf08      	it	eq
 8004e8e:	3601      	addeq	r6, #1
 8004e90:	3502      	adds	r5, #2
 8004e92:	e7df      	b.n	8004e54 <__ieee754_sqrt+0x158>
 8004e94:	1c6b      	adds	r3, r5, #1
 8004e96:	f023 0501 	bic.w	r5, r3, #1
 8004e9a:	e7db      	b.n	8004e54 <__ieee754_sqrt+0x158>
 8004e9c:	7ff00000 	.word	0x7ff00000
 8004ea0:	20000078 	.word	0x20000078
 8004ea4:	20000070 	.word	0x20000070

08004ea8 <__ieee754_log>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	460d      	mov	r5, r1
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	da24      	bge.n	8004f04 <__ieee754_log+0x5c>
 8004eba:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004ebe:	4304      	orrs	r4, r0
 8004ec0:	d108      	bne.n	8004ed4 <__ieee754_log+0x2c>
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	49cb      	ldr	r1, [pc, #812]	@ (80051f8 <__ieee754_log+0x350>)
 8004eca:	f7fb fc27 	bl	800071c <__aeabi_ddiv>
 8004ece:	b007      	add	sp, #28
 8004ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	da04      	bge.n	8004ee2 <__ieee754_log+0x3a>
 8004ed8:	f7fb f93e 	bl	8000158 <__aeabi_dsub>
 8004edc:	2200      	movs	r2, #0
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e7f3      	b.n	8004eca <__ieee754_log+0x22>
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4bc5      	ldr	r3, [pc, #788]	@ (80051fc <__ieee754_log+0x354>)
 8004ee6:	f7fb faef 	bl	80004c8 <__aeabi_dmul>
 8004eea:	460b      	mov	r3, r1
 8004eec:	460d      	mov	r5, r1
 8004eee:	4602      	mov	r2, r0
 8004ef0:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8004ef4:	48c2      	ldr	r0, [pc, #776]	@ (8005200 <__ieee754_log+0x358>)
 8004ef6:	4285      	cmp	r5, r0
 8004ef8:	dd06      	ble.n	8004f08 <__ieee754_log+0x60>
 8004efa:	4610      	mov	r0, r2
 8004efc:	4619      	mov	r1, r3
 8004efe:	f7fb f92d 	bl	800015c <__adddf3>
 8004f02:	e7e4      	b.n	8004ece <__ieee754_log+0x26>
 8004f04:	2100      	movs	r1, #0
 8004f06:	e7f5      	b.n	8004ef4 <__ieee754_log+0x4c>
 8004f08:	152c      	asrs	r4, r5, #20
 8004f0a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8004f0e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004f12:	440c      	add	r4, r1
 8004f14:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8004f18:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8004f1c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8004f20:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8004f24:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8004f28:	ea41 0305 	orr.w	r3, r1, r5
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	2200      	movs	r2, #0
 8004f32:	4bb4      	ldr	r3, [pc, #720]	@ (8005204 <__ieee754_log+0x35c>)
 8004f34:	f7fb f910 	bl	8000158 <__aeabi_dsub>
 8004f38:	1cab      	adds	r3, r5, #2
 8004f3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	4682      	mov	sl, r0
 8004f42:	468b      	mov	fp, r1
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8004f4c:	dc53      	bgt.n	8004ff6 <__ieee754_log+0x14e>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f7fb fd22 	bl	8000998 <__aeabi_dcmpeq>
 8004f54:	b1d0      	cbz	r0, 8004f8c <__ieee754_log+0xe4>
 8004f56:	2c00      	cmp	r4, #0
 8004f58:	f000 8120 	beq.w	800519c <__ieee754_log+0x2f4>
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f7fb fa49 	bl	80003f4 <__aeabi_i2d>
 8004f62:	a391      	add	r3, pc, #580	@ (adr r3, 80051a8 <__ieee754_log+0x300>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	4606      	mov	r6, r0
 8004f6a:	460f      	mov	r7, r1
 8004f6c:	f7fb faac 	bl	80004c8 <__aeabi_dmul>
 8004f70:	a38f      	add	r3, pc, #572	@ (adr r3, 80051b0 <__ieee754_log+0x308>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	4604      	mov	r4, r0
 8004f78:	460d      	mov	r5, r1
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	f7fb faa3 	bl	80004c8 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4620      	mov	r0, r4
 8004f88:	4629      	mov	r1, r5
 8004f8a:	e7b8      	b.n	8004efe <__ieee754_log+0x56>
 8004f8c:	a38a      	add	r3, pc, #552	@ (adr r3, 80051b8 <__ieee754_log+0x310>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	4650      	mov	r0, sl
 8004f94:	4659      	mov	r1, fp
 8004f96:	f7fb fa97 	bl	80004c8 <__aeabi_dmul>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	4999      	ldr	r1, [pc, #612]	@ (8005208 <__ieee754_log+0x360>)
 8004fa2:	f7fb f8d9 	bl	8000158 <__aeabi_dsub>
 8004fa6:	4652      	mov	r2, sl
 8004fa8:	4606      	mov	r6, r0
 8004faa:	460f      	mov	r7, r1
 8004fac:	465b      	mov	r3, fp
 8004fae:	4650      	mov	r0, sl
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	f7fb fa89 	bl	80004c8 <__aeabi_dmul>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4630      	mov	r0, r6
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	f7fb fa83 	bl	80004c8 <__aeabi_dmul>
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	b914      	cbnz	r4, 8004fce <__ieee754_log+0x126>
 8004fc8:	4632      	mov	r2, r6
 8004fca:	463b      	mov	r3, r7
 8004fcc:	e0a0      	b.n	8005110 <__ieee754_log+0x268>
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7fb fa10 	bl	80003f4 <__aeabi_i2d>
 8004fd4:	a374      	add	r3, pc, #464	@ (adr r3, 80051a8 <__ieee754_log+0x300>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	4680      	mov	r8, r0
 8004fdc:	4689      	mov	r9, r1
 8004fde:	f7fb fa73 	bl	80004c8 <__aeabi_dmul>
 8004fe2:	a373      	add	r3, pc, #460	@ (adr r3, 80051b0 <__ieee754_log+0x308>)
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	4604      	mov	r4, r0
 8004fea:	460d      	mov	r5, r1
 8004fec:	4640      	mov	r0, r8
 8004fee:	4649      	mov	r1, r9
 8004ff0:	f7fb fa6a 	bl	80004c8 <__aeabi_dmul>
 8004ff4:	e0a5      	b.n	8005142 <__ieee754_log+0x29a>
 8004ff6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004ffa:	f7fb f8af 	bl	800015c <__adddf3>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4650      	mov	r0, sl
 8005004:	4659      	mov	r1, fp
 8005006:	f7fb fb89 	bl	800071c <__aeabi_ddiv>
 800500a:	e9cd 0100 	strd	r0, r1, [sp]
 800500e:	4620      	mov	r0, r4
 8005010:	f7fb f9f0 	bl	80003f4 <__aeabi_i2d>
 8005014:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	f7fb fa52 	bl	80004c8 <__aeabi_dmul>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800502c:	f7fb fa4c 	bl	80004c8 <__aeabi_dmul>
 8005030:	a363      	add	r3, pc, #396	@ (adr r3, 80051c0 <__ieee754_log+0x318>)
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	4680      	mov	r8, r0
 8005038:	4689      	mov	r9, r1
 800503a:	f7fb fa45 	bl	80004c8 <__aeabi_dmul>
 800503e:	a362      	add	r3, pc, #392	@ (adr r3, 80051c8 <__ieee754_log+0x320>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb f88a 	bl	800015c <__adddf3>
 8005048:	4642      	mov	r2, r8
 800504a:	464b      	mov	r3, r9
 800504c:	f7fb fa3c 	bl	80004c8 <__aeabi_dmul>
 8005050:	a35f      	add	r3, pc, #380	@ (adr r3, 80051d0 <__ieee754_log+0x328>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb f881 	bl	800015c <__adddf3>
 800505a:	4642      	mov	r2, r8
 800505c:	464b      	mov	r3, r9
 800505e:	f7fb fa33 	bl	80004c8 <__aeabi_dmul>
 8005062:	a35d      	add	r3, pc, #372	@ (adr r3, 80051d8 <__ieee754_log+0x330>)
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	f7fb f878 	bl	800015c <__adddf3>
 800506c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005070:	f7fb fa2a 	bl	80004c8 <__aeabi_dmul>
 8005074:	a35a      	add	r3, pc, #360	@ (adr r3, 80051e0 <__ieee754_log+0x338>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800507e:	4640      	mov	r0, r8
 8005080:	4649      	mov	r1, r9
 8005082:	f7fb fa21 	bl	80004c8 <__aeabi_dmul>
 8005086:	a358      	add	r3, pc, #352	@ (adr r3, 80051e8 <__ieee754_log+0x340>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	f7fb f866 	bl	800015c <__adddf3>
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	f7fb fa18 	bl	80004c8 <__aeabi_dmul>
 8005098:	a355      	add	r3, pc, #340	@ (adr r3, 80051f0 <__ieee754_log+0x348>)
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f7fb f85d 	bl	800015c <__adddf3>
 80050a2:	4642      	mov	r2, r8
 80050a4:	464b      	mov	r3, r9
 80050a6:	f7fb fa0f 	bl	80004c8 <__aeabi_dmul>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050b2:	f7fb f853 	bl	800015c <__adddf3>
 80050b6:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80050ba:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80050be:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80050c2:	3551      	adds	r5, #81	@ 0x51
 80050c4:	4335      	orrs	r5, r6
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	4680      	mov	r8, r0
 80050ca:	4689      	mov	r9, r1
 80050cc:	dd48      	ble.n	8005160 <__ieee754_log+0x2b8>
 80050ce:	2200      	movs	r2, #0
 80050d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005208 <__ieee754_log+0x360>)
 80050d2:	4650      	mov	r0, sl
 80050d4:	4659      	mov	r1, fp
 80050d6:	f7fb f9f7 	bl	80004c8 <__aeabi_dmul>
 80050da:	4652      	mov	r2, sl
 80050dc:	465b      	mov	r3, fp
 80050de:	f7fb f9f3 	bl	80004c8 <__aeabi_dmul>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4606      	mov	r6, r0
 80050e8:	460f      	mov	r7, r1
 80050ea:	4640      	mov	r0, r8
 80050ec:	4649      	mov	r1, r9
 80050ee:	f7fb f835 	bl	800015c <__adddf3>
 80050f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f6:	f7fb f9e7 	bl	80004c8 <__aeabi_dmul>
 80050fa:	4680      	mov	r8, r0
 80050fc:	4689      	mov	r9, r1
 80050fe:	b964      	cbnz	r4, 800511a <__ieee754_log+0x272>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4630      	mov	r0, r6
 8005106:	4639      	mov	r1, r7
 8005108:	f7fb f826 	bl	8000158 <__aeabi_dsub>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4650      	mov	r0, sl
 8005112:	4659      	mov	r1, fp
 8005114:	f7fb f820 	bl	8000158 <__aeabi_dsub>
 8005118:	e6d9      	b.n	8004ece <__ieee754_log+0x26>
 800511a:	a323      	add	r3, pc, #140	@ (adr r3, 80051a8 <__ieee754_log+0x300>)
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005124:	f7fb f9d0 	bl	80004c8 <__aeabi_dmul>
 8005128:	a321      	add	r3, pc, #132	@ (adr r3, 80051b0 <__ieee754_log+0x308>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	4604      	mov	r4, r0
 8005130:	460d      	mov	r5, r1
 8005132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005136:	f7fb f9c7 	bl	80004c8 <__aeabi_dmul>
 800513a:	4642      	mov	r2, r8
 800513c:	464b      	mov	r3, r9
 800513e:	f7fb f80d 	bl	800015c <__adddf3>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4630      	mov	r0, r6
 8005148:	4639      	mov	r1, r7
 800514a:	f7fb f805 	bl	8000158 <__aeabi_dsub>
 800514e:	4652      	mov	r2, sl
 8005150:	465b      	mov	r3, fp
 8005152:	f7fb f801 	bl	8000158 <__aeabi_dsub>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4620      	mov	r0, r4
 800515c:	4629      	mov	r1, r5
 800515e:	e7d9      	b.n	8005114 <__ieee754_log+0x26c>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4650      	mov	r0, sl
 8005166:	4659      	mov	r1, fp
 8005168:	f7fa fff6 	bl	8000158 <__aeabi_dsub>
 800516c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005170:	f7fb f9aa 	bl	80004c8 <__aeabi_dmul>
 8005174:	4606      	mov	r6, r0
 8005176:	460f      	mov	r7, r1
 8005178:	2c00      	cmp	r4, #0
 800517a:	f43f af25 	beq.w	8004fc8 <__ieee754_log+0x120>
 800517e:	a30a      	add	r3, pc, #40	@ (adr r3, 80051a8 <__ieee754_log+0x300>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005188:	f7fb f99e 	bl	80004c8 <__aeabi_dmul>
 800518c:	a308      	add	r3, pc, #32	@ (adr r3, 80051b0 <__ieee754_log+0x308>)
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	4604      	mov	r4, r0
 8005194:	460d      	mov	r5, r1
 8005196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800519a:	e729      	b.n	8004ff0 <__ieee754_log+0x148>
 800519c:	2000      	movs	r0, #0
 800519e:	2100      	movs	r1, #0
 80051a0:	e695      	b.n	8004ece <__ieee754_log+0x26>
 80051a2:	bf00      	nop
 80051a4:	f3af 8000 	nop.w
 80051a8:	fee00000 	.word	0xfee00000
 80051ac:	3fe62e42 	.word	0x3fe62e42
 80051b0:	35793c76 	.word	0x35793c76
 80051b4:	3dea39ef 	.word	0x3dea39ef
 80051b8:	55555555 	.word	0x55555555
 80051bc:	3fd55555 	.word	0x3fd55555
 80051c0:	df3e5244 	.word	0xdf3e5244
 80051c4:	3fc2f112 	.word	0x3fc2f112
 80051c8:	96cb03de 	.word	0x96cb03de
 80051cc:	3fc74664 	.word	0x3fc74664
 80051d0:	94229359 	.word	0x94229359
 80051d4:	3fd24924 	.word	0x3fd24924
 80051d8:	55555593 	.word	0x55555593
 80051dc:	3fe55555 	.word	0x3fe55555
 80051e0:	d078c69f 	.word	0xd078c69f
 80051e4:	3fc39a09 	.word	0x3fc39a09
 80051e8:	1d8e78af 	.word	0x1d8e78af
 80051ec:	3fcc71c5 	.word	0x3fcc71c5
 80051f0:	9997fa04 	.word	0x9997fa04
 80051f4:	3fd99999 	.word	0x3fd99999
 80051f8:	c3500000 	.word	0xc3500000
 80051fc:	43500000 	.word	0x43500000
 8005200:	7fefffff 	.word	0x7fefffff
 8005204:	3ff00000 	.word	0x3ff00000
 8005208:	3fe00000 	.word	0x3fe00000

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
